runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
fluidPage(fluidRow(
column(1,
br(),
actionButton("guideMatch", "Guide", icon = icon("info-circle"))
),
column(1,
h3("CohortX"),
helpText("(your cohort)")
),
column(2,
div(id = "cohortInput",
textInput("cohortName", "Your cohort name/label (optional)", value = "", placeholder = "e.g. 'DiViD', 'pilot'.."),
fileInput("cohortDataUpload",  HTML("<strong>Upload data to begin</strong>"), multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv"),
buttonLabel = "Data")
)
),
column(1,
br(),
checkboxInput("outsideCohort", "non-nPOD cohort", value = T),
br(),
br(),
actionLink("cohortDataRequirements", icon = icon("exclamation"), "Data requirements")
),
column(1
),
column(6
)),
fluidRow(
column(1
),
column(1, style="border-top: 1px solid lightgray;",
br(),
h3("nPOD")
),
column(2, style="border-top: 1px solid lightgray;",
br(),
div(id = "nPODInput",
selectInput("matchType", "Type of matches to get from nPOD",
choices = list("No diabetes (negative control)" = c(`No-diabetes donors` = "ND"),
"T1D (positive control)" = c(`T1D donors` = "T1D"),
"Other" = c(`T2D donors` = "T2D", `Autoantibody-positive donors` = "AAb")))
)
),
column(2),
column(6,
div(id = "npodgraph", style="margin-top: -220px; z-index: 0; height: 500px;", plotlyOutput("npodgraph")),
div(style="position: absolute; margin-top: -200px; margin-left: -140px; top:0; left:0; z-index: 1;",
plotlyOutput("nPie"))
)),
fluidRow(
column(1),
column(11, style="padding-top: 20px;",
uiOutput("matchUI")
)
),
fluidRow(style="margin-top: 20px; padding-bottom: 50px;",
column(5, style="padding-right: 50px;",
uiOutput("matchResult")
),
column(3,
uiOutput("advancedMatchResult")
),
column(4,
uiOutput("advancedMatchResult2")
)
)
)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
ggplot()
library(ggplot)
library(ggplot2)
ggplot()
load("~/Documents/Met/wgcna.Rdata")
shiny::runApp('nPOD/nPOD-App/app')
runApp('nPOD/nPOD-App/app')
max(c(NA, 1, 2, 3))
NA > 5
NA >= 5
1:5[c(NA, 3, 5)]
c(NA, 3, 5, 3, 4, 5) > 3
test <- data.frame(x = 1:3, y = 3:1)
ggplot(test) + geom_point()
runApp('nPOD/nPOD-App/Test-dev/match')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
setwd("~/DIVE")
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
devtools::load_all()
devtools::load_all()
multiVAppRun()
devtools::load_all()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
max(NA, na.rm = T)
max(NA)
devtools::load_all()
devtools::load_all()
multiVAppRun()
-Inf
-Inf > 0
if(-Inf) "yes"
if(Inf) "yes"
max(NA)
max()
x <- NA
x <- x[!is.na(x)]
x
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
x <- 1:10
cut(x, c(5, 1))
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
devtools::load_all()
multiVAppRun()
runApp('~/nPOD/dev')
devtools::load_all()
runApp('~/nPOD/dev')
multiVAppRun()
px1_t[1:5, ]
px1_t[1:5, 1:5]
runApp('~/nPOD/dev')
is.numeric(1)
is.numeric(1L)
findInterval(1:10, c(1, 4))
findInterval(c(1:5, 10:1), c(1, 4))
findInterval(c(1:5, 10:1, NA), c(1, 4))
findInterval(c(1:5, 10:1, NA), c(1, 4), all.inside = T)
findInterval(c(1:5, 10:1, NA), c(1, 4), rightmost.closed = T)
findInterval(c(6:10, 10, 5.1, NA), c(1, 4.4), rightmost.closed = T)
findInterval(c(6:10, 10, 1, NA), c(1), rightmost.closed = T)
findInterval(c(1, 6:10, 10, 1, NA), c(1), rightmost.closed = T)
findInterval(c(1, 6:10, 10, 1, NA), c(1, 1), rightmost.closed = T)
which(findInterval(c(1, 6:10, 10, 1, NA), c(1, 1), rightmost.closed = T) == 1)
findInterval(c(1, 6:10, 10, 1, NA), c(1, 1), rightmost.closed = T) == 1
devtools::load_all()
devtools::load_all()
runApp('~/nPOD/dev')
devtools::load_all()
devtools::load_all()
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
devtools::load_all()
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
devtools::load_all()
runApp('~/nPOD/dev')
xm <- gx_t
xm <- t(xm_t)
names(xm)
colnames(xm)
intersect(1, 1)
intersect(1, 1:10)
intersect(1:20, 1:10)
intersect(chracter(0), "a")
intersect(character(0), "a")
groups <- colnames(xm)
groups <- factor(colnames(xm))
groups
levels(groups) <- list(group1 = c("6102", "6027"), group2 = c("6148", "6148", "6197"))
groups
groups <- factor(colnames(xm))
levels(groups) <- list(group1 = c("6102", "6027"), group2 = c("6148", "6258", "6197"))
groups[is.na(groups)] <- "NA"
levels(groups) <- list(group1 = c("6102", "6027"), group2 = c("6148", "6258", "6197"), "NA")
groups <- factor(colnames(xm))
levels(groups) <- list(group1 = c("6102", "6027"), group2 = c("6148", "6258", "6197"), "NA")
groups
groups <- factor(colnames(xm), exclude = NULL)
levels(groups) <- list(group1 = c("6102", "6027"), group2 = c("6148", "6258", "6197"), "NA")
groups
groups <- factor(colnames(xm), exclude = NULL)
levels(groups) <- list(group1 = c("6102", "6027"), group2 = c("6148", "6258", "6197"))
groups <- addNA(groups)
groups
unique(groups)
as.characer("groups")
as.character("groups")
IDs <- colnames(xm)
cdata[ID %in% IDs, donor.type]
donor_levs <- split(cdata[ID %in% IDs, donor.type], levels = unique(IDs))
donor_levs <- split(cdata[ID %in% IDs, donor.type], f = unique(IDs))
donor_levs
dlev <- cdata[ID %in% IDs, donor.type]
split(dlev, f = dlev)
dlev <- split(dlev, f = dlev)
dlev <- cdata[ID %in% IDs, donor.type]
dlev <- split(IDs, f = dlev)
dlev
IDs
cdata[ID %in% IDs, donor.type]
groups <- factor(colnames(xm), exclude = NULL)
levels(groups) <- list(g1 = dlev$T1D, g2 = dlev$`No diabetes`)
groups <- addNA(groups)
groups
design <- model.matrix(~0 + groups)
design
group <- factor(colnames(xm), exclude = NULL)
levels(group) <- list(g1 = dlev$T1D, g2 = dlev$`No diabetes`)
group <- addNA(group)
fitDesign <- function(matrix, group) {
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
fit <- limma::lmFit(matrix, design)
return(fit)
}
fit <- fitDesign(xm, group = group)
fitContrast <- function(fit, contrast) {
cont.matrix <- limma::makeContrasts(contrasts = contrast, levels = fit$design)
fit2 <- contrasts.fit(fit, cont.matrix) %>% eBayes()
return(fit2)
}
fit2 <- fitContrast(fit, contrast = "g2-g1")
fit$design
levels(group)[3] <- "NA"
group
levels(group)[3] <- "ignore"
fit <- fitDesign(xm, group = group)
fit2 <- fitContrast(fit, contrast = "g2-g1")
fitContrast <- function(fit, contrast) {
cont.matrix <- limma::makeContrasts(contrasts = contrast, levels = fit$design)
fit2 <- limma::contrasts.fit(fit, cont.matrix) %>% eBayes()
return(fit2)
}
fit2 <- fitContrast(fit, contrast = "g2-g1")
fitContrast <- function(fit, contrast) {
cont.matrix <- limma::makeContrasts(contrasts = contrast, levels = fit$design)
fit2 <- limma::contrasts.fit(fit, cont.matrix) %>% limma::eBayes()
return(fit2)
}
fit2 <- fitContrast(fit, contrast = "g2-g1")
adj.p <- p.adjust(g2vsg1$p.value, method="fdr")
adj.p <- p.adjust(fit2$p.value, method="fdr")
head(adj.p)
summary(adj.p)
head(fit2)
fit2
means1 <- colMeans(xm[, dlev$T1D])
means2 <- colMeans(xm[, dlev$`No diabetes`])
diffx <- means2-means1
dlev
head(means1)
means1 <- rowMeans(xm[, dlev$T1D])
means2 <- rowMeans(xm[, dlev$`No diabetes`])
diffx <- means2-means1
negLogAdjP <- log(adjP)
adjP <- p.adjust(fit2$p.value, method="fdr")
negLogAdjP <- -log(adjP)
neglogAdjP <- -log(adjP)
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
# color = ~Color, colors = pal2, #textfont = list(color = "#000000"), textposition = "top center",
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
plot_ly(x = diffx, y = fit2$p.value, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
# color = ~Color, colors = pal2, #textfont = list(color = "#000000"), textposition = "top center",
showlegend = FALSE)
head(fit2$p.value)
head(fit2$p.value[[1]])
head(fit2$p.value[, 1])
plot_ly(x = diffx, y = fit2$p.value[, 1], type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
# color = ~Color, colors = pal2, #textfont = list(color = "#000000"), textposition = "top center",
showlegend = FALSE)
plot_ly(x = diffx, y = -log(fit2$p.value[, 1]), type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
# color = ~Color, colors = pal2, #textfont = list(color = "#000000"), textposition = "top center",
showlegend = FALSE)
runApp('~/nPOD/nPOD-App/app')
group <- factor(colnames(xm), exclude = NULL)
levels(group) <- list(g1 = dlev$T1D, g2 = dlev$`No diabetes`)
group <- addNA(group)
levels(group)[3] <- "ignore"
fit <- fitDesign(xm, group = group)
fit2 <- fitContrast(fit, contrast = "g1-g2")
adjP <- p.adjust(fit2$p.value, method = "fdr")
diffx <- means1-means2
neglogAdjP <- -log(adjP)
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
# color = ~Color, colors = pal2, #textfont = list(color = "#000000"), textposition = "top center",
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
dlev
colnames(xm)
cdata[ID %in% colnames(xm), .(ID, donor.type)]
cdata[match(colnames(xm), ID), .(ID, donor.type)]
cdata[match(colnames(xm), ID), donor.type]
dlev <- cdata[match(colnames(xm), ID), donor.type]
dlev <- split(IDs, f = dlev)
dlev
group <- factor(colnames(xm), exclude = NULL)
levels(group) <- list(g1 = dlev$T1D, g2 = dlev$`No diabetes`)
group <- addNA(group)
levels(group)[3] <- "ignore"
fit <- fitDesign(xm, group = group)
fit2 <- fitContrast(fit, contrast = "g1-g2")
adjP <- p.adjust(fit2$p.value, method = "fdr")
means1 <- rowMeans(xm[, dlev$T1D])
means2 <- rowMeans(xm[, dlev$`No diabetes`])
diffx <- means1-means2
neglogAdjP <- -log(adjP)
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
# color = ~Color, colors = pal2, #textfont = list(color = "#000000"), textposition = "top center",
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
-log(0.05)
sigcolor <- ifelse(adjP < 0.5, "mediumspringgreen", "gray")
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
color = sigcolor,
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
sigcolor <- ifelse(adjP < 0.05, "magenta", "gray")
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
color = sigcolor,
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
head(adjP)
sigcolor <- ifelse(adjP < 0.05, "red", "gray")
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
color = sigcolor,
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
sigcolor <- ifelse(adjP < 0.05, "significant", "not significant")
plot_ly(x = diffx, y = neglogAdjP, type="scatter", mode = "markers",
hoverinfo = "text", text = paste("<br>-log(adjusted p): ", neglogAdjP, "<br>Difference: ", diffx),
color = sigcolor, colors = c(significant = "red", `not significant` = "gray"),
showlegend = FALSE) %>%
layout(xaxis = list(title = "Difference Group 2 - Group 1"), yaxis = list(title = "-log(adjusted p)"))
