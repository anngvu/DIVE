getwd()
setwd("~/")
getwd()
devtools::create("nPOD")
devtools::create_package("nPOD")
usethis::create_package("nPOD")
setwd("~/DIVE")
devtools::install()
shiny::runApp('~/nPOD/inst/app')
m <- matrix(1:5, nrow = 5)
m
s1 <- plot_ly(m, x = "A", y = letters[1:5], colors = rainbow(5))
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", colors = rainbow(5))
s1
s2 <- plot_ly(z = m, x = "B", y = letters[1:5], type = "heatmap", colors = rainbow(5))
s2
subplot(s1, s2, shareY = T)
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", colors = c(rainbow(3), NA, NA))
subplot(s1, s2, shareY = T)
is.factor(cdata$donor.type)
cat(head(cdata$donor.type))
cat(head(as.character(cdata$donor.type)))
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", colors = c(rainbow(3), NA, NA), showscale = F)
subplot(s1, s2, shareY = T)
subplot(s1, s2, shareY = T) %>%
layout(xaxis = list(title = v, zeroline = FALSE, showline = FALSE,
showticklabels = FALSE, showgrid = FALSE, type = "category"),
yaxis = list(type = "category", categoryorder = "array", categoryarray = y))
subplot(s1, s2, shareY = T) %>%
layout(xaxis = list(zeroline = FALSE, showline = FALSE,
showticklabels = FALSE, showgrid = FALSE, type = "category"),
yaxis = list(type = "category", categoryorder = "array", categoryarray = y))
subplot(s1, s2, shareY = T) %>%
layout(xaxis = list(zeroline = FALSE, showline = FALSE,
showticklabels = FALSE, showgrid = FALSE, type = "category"),
yaxis = list(type = "category", categoryorder = "array", categoryarray = letters[1:5]))
cat(s1)
s2 <- plot_ly(z = matrix(1:25, nrow = 5, ncol = 5), x = letters[1:5], y = letters[1:5], type = "heatmap", colors = rainbow(25))
s2
subplot(s1, s2, shareY = T)
print(data.frame(A = 1:3))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
print(s1)
str(s1)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", colors = setNames(c(rainbow(3), NA, NA), letters[1:5]), showscale = F)
s1
str(s1$x)
subplot(s1, s2, shareY = T)
subplot(s1, list())
subplot(c(s1, list()))
subplot(c(s1, list()))
subplot(c(list(s1), list()))
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
print("palette", 1:3)
print(1:3, 1:3)
print(list(A = 1:3, B = 5))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
scales::show_col("#00FF2EFF" )
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", color = c("a", "b", "c"), colors = setNames(c(rainbow(3), NA, NA), letters[1:5]), showscale = F)
s1
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", colors = setNames(c(rainbow(3), NA, NA), letters[1:5]), showscale = F)
s1
setNames(c(rainbow(3), NA, NA)
setNames(c(rainbow(3), NA, NA), letters[1:5])
s1 <- plot_ly(z = m, x = "A", y = letters[1:5], type = "heatmap", color = setNames(c(rainbow(3), NA, NA), letters[1:5]), colors = setNames(c(rainbow(3), NA, NA), letters[1:5]), showscale = F)
s1
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
nlevels(factor(1:))
nlevels(factor(1:3))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
setwd("~/Documents")
library(tidyverse)
x <- read_tsv("emcounts.csv")
head(x)
x <- x %>% mutate(ID = gsub("[a-z]", "", ID))
x
x <- x %>% group_by(ID) %>% summarize(MC.Total = mean(MC.Total, na.rm = T), Neutrophils = mean(Neutrophils, na.rm = T), Tryptase = mean(Tryptase, na.rm = T))
head(x)
write_csv(x, file = "emcounts_summarized.csv")
write_csv(x, "emcounts_summarized.csv")
runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
m <- matrix(sample(1:25), nrow = 5)
m
m <- rbind(matrix(sample(1:25), nrow = 5), matrix(sample(1:15), nrow = 5))
m <- rbind(matrix(sample(1:25), nrow = 5), matrix(sample(1:15), nrow = 3))
m
sample_clust <- dist(m) # cluster by samples
sample_clust <- hclust(sample_clust)
sample_clust
m2 <- m[sample_clust$labels[sample_clust$order], ]
m2
sample_clust$order
sample_clust$labels[sample_clust$order]
sample_clust$labels
row.names(m) <- letters[1:8]
sample_clust <- dist(m) # cluster by samples
sample_clust <- hclust(sample_clust)
sample_clust$labels
sample_clust$labels[sample_clust$order]
m2 <- m[sample_clust$labels[sample_clust$order], ]
m2
m
# add new dendroplot
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dndro
dendro
pm <- plot_ly(z = m, type = "heatmap")
pm
pm <- plot_ly(z = m, x = row.names(m), type = "heatmap")
pm
pm <- plot_ly(z = m, y = row.names(m), type = "heatmap")
pm
subplot(dendro, pm, shareY = )
pm2 <- plot_ly(z = m2, y = row.names(m2), type = "heatmap")
subplot(dendro, pm2, shareY = T)
pm2
subplot(dendro, pm2, shareY = T)
subplot(dendro, pm2, shareX = T)
dendro2 <- dendro
dendro2$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$text <- paste("  ", x$text); x })
dendro2
dendro2 <- dendro
dendro2$x$attrs <- lapply(dendro2$x$attrs, function(x) { x$showlegend <- F ; x$text <- paste("  ", x$text, collapse = ""); x })
dendro2
pms2 <- subplot(dendro, pm2, shareX = T)
pms2 <- pms2 %>% layout(margin = 0)
pms2
pms2 <- pms2 %>% layout(margin = list(l = -5, r = 0, t = 0, b = 0))
pms2
pms2 <- pms2 %>% layout(margin = list(l = -50, r = 0, t = 0, b = 0))
pms2
dendro2$x
dendro$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$hoverinfo <- x$text; x$text <- ""; collapse = ""); x  })
dendro$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$hoverinfo <- x$text; x$text <- ""; collapse = ""; x  })
dendro
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
str(dendro$x)
dendro$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$hoverinfo <- "~label"; x$text <- ""; collapse = ""; x  })
dendro
as.dendrogram(sample_clust)
d <- as.dendrogram(sample_clust)
d
dendro$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$hoverinfo <- as.formula("~label"); x$text <- ""; collapse = ""; x  })
dendro
as.formula("~label")
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$hoverinfo <- x$text ; collapse = ""; x  })
dendro
str(dendro$x)
dendro$x$attrs <- lapply(dendro$x$attrs, function(x) { x$showlegend <- F ; x$hoverinfo <- x$key ; collapse = ""; x  })
dendro
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(x$name == "labels") x$name == "sample"
x$hoverinfo <- x$key
x
})
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") x$name <- "sample"
x$hoverinfo <- x$key
x
})
dendro
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") x$name <- "sample"
x$hoverinfo <- x$key
x$text <- NULL
x
})
dendro
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") x$name <- "sample"
x$hoverinfo <- x$key
x$text <- ""
x
})
dendro
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") x$name <- "sample"
x$hoverinfo <- x$text
x$text <- ""
x
})
dendro
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") x$name <- "sample"
x$hoverinfo <- x$key
x$text <- ""
x
})
dendro
str(dendro$x)
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") { x$name <- "sample"; x$color <- "transparent" }
x$hoverinfo <- x$key
# x$text <- ""
x
})
dendro
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") { x$name <- "sample" }
x$hoverinfo <- x$key
# x$text <- ""
x
})
dendro
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") { x$name <- "sample"; x$alpha_stroke <- 0}
x$hoverinfo <- x$text
# x$text <- ""
x
})
dendro
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") { x$name <- "sample"; x$alpha_stroke <- 0L}
x$hoverinfo <- x$text
# x$text <- ""
x
})
dendro
dendro$elementId
dendro$x$source
dendro$x$attrs$`5c082f7a6679`
dendro$x$attrs$`5c086695c4fb`
dendro$x$attrs$`5c0856490026`$color
attr(dendro$x$attrs$`5c0856490026`$color)
attrs(dendro$x$attrs$`5c0856490026`$color)
attributes(dendro$x$attrs$`5c0856490026`$color)
attr("transparent", class, "AsIs")
attr("transparent", "class", "AsIs")
dendro <- plotly::plot_dendro(as.dendrogram(sample_clust))
dendro <- dendro %>% layout(xaxis = list(autorange = "reversed", showgrid = FALSE),
yaxis = list(showgrid = FALSE),
paper_bgcolor = "#FFFFFF", plot_bgcolor = "#FFFFFF")
dendro$x$attrs <- lapply(dendro$x$attrs,
function(x) {
x$showlegend <- F
if(!is.null(x$name) && x$name == "labels") { x$name <- "sample"; x$color <- sub("black", "transparent", x$color)}
x$hoverinfo <- x$text
# x$text <- ""
x
})
dendro
dendro %>% layout(margin = list(l = 0))
devtools::install()
setwd("~/DIVE")
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
str(dendro)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
pm2 <- plot_ly(z = m2, y = row.names(m2), type = "heatmap", height = nrow(m) * 20)
pms2 <- subplot(dendro, pm2, shareX = T)
pms2
pm2 <- plot_ly(z = m2, y = row.names(m2), type = "heatmap", height = nrow(m) * 25)
subplot(dendro, pm2, shareX = T)
pms2 <- subplot(dendro, pm2, pm, shareX = T)
pms2
pms2 <- subplot(dendro, pm2, subplot(pm), shareX = T)
pms2
scales::show_col("#F5F5F5")
pm2 <- plot_ly(z = m2, y = row.names(m2), type = "heatmap", height = nrow(m) * 25) %>%
layout(plot_bgcolor = "#F5F5F5")
pms2 <- subplot(dendro, pm2, subplot(pm), shareX = T)
pms2
pms2 <- subplot(dendro, pm2, shareX = T,  widths = c(0.1, 0.9))
pms2
str(dendro$layout)
str(dendro$sizingPolicy$padding)
dendro$sizingPolicy$browser
dendro$sizingPolicy$browser$padding <- 50
dendro
subplot(dendro, pm2, shareX = T,  widths = c(0.1, 0.9))
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
plotly_example("shiny", "proxy_relayout")
devtools::install()
shiny::runApp('~/nPOD/inst/app')
str(dendro$sizingPolicy)
str(pm2$sizingPolicy)
dendro$jsHooks
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
c(NULL, "")
x <- list(NULL, "")
x
rm(x)
which(1:3 = 3)
which(1:3 == 3)
which(1:3 == 5)
which(c(F, F, F))
which(1:3 == c(1:3, 1:3))
1:3[-1]
1:3[-c(1)]
test <- data.table(A = 1:3, B = 1:3)
cols <- 1
test[, ..!cols]
test[, !..cols]
is.numeric(c(1L, c2L))
is.numeric(c(1L, 2L))
length(test)
x <- NULL
x
rm(x)
is.null(c())
devtools::document()
devtools::install()
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
dep <- list(
htmltools::htmlDependency(
name       = "jqueryui",
version    = "1.12.1",
package    = "shiny",
src        = "www/shared/jqueryui",
script     = "jquery-ui.min.js",
stylesheet = "jquery-ui.css"
),
htmltools::htmlDependency(
name       = "consortui-bindings",
version    = "0.1.0",
package    = "DIVE",
src        = "www",
script     = "consortUIBinding.js",
stylesheet = "consortUI.css"
)
)
div(dep)
tagList(dep)
dep <- list(
htmltools::htmlDependency(
name       = "jqueryui",
version    = "1.12.1",
package    = "shiny",
src        = "www/shared/jqueryui",
script     = "jquery-ui.min.js",
stylesheet = "jquery-ui.css"
),
htmltools::htmlDependency(
name       = "dive-app-js",
version    = "0.1.0",
package    = "DIVE",
src        = "www",
script     = "app.js"
)
)
htmltools::htmlDependency(
name       = "jqueryui",
version    = "1.12.1",
package    = "shiny",
src        = "www/shared/jqueryui",
script     = "jquery-ui.min.js",
stylesheet = "jquery-ui.css"
)
htmltools::htmlDependency(
name       = "consortui-bindings",
version    = "0.1.0",
package    = "DIVE",
src        = "www",
script     = "consortUIBinding.js",
stylesheet = "consortUI.css"
)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
dev_mode(TRUE)
options(dev_mode = TRUE)
dev_mode()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
options(dev_mode = TRUE)
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
