.a
rm(.a)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
head(gx$Gene)
shiny::runApp('nPOD/nPOD-App/DIVE')
shiny::runApp('nPOD/nPOD-App/DIVE')
removeUI("#matchUI",immediate = T)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
req(!is.null(cohortdata$matchOpts))
runApp('nPOD/nPOD-App/DIVE')
tags$div(
fluidRow(
column(2,
HTML("<strong>Data fusion/parameter selection</strong><br>"),
helpText("All covariates guessed as shared by both datasets are used as match parameters, which does not necessarily represent the user-desired default.
Parameters can be adjusted in a drag-and-drop manner, i.e. bring over and connect those that should be used.")
),
column(2,
HTML("<strong>You are matching on</strong>"),
verbatimTextOutput("matchOn", placeholder = TRUE),
actionButton("match", "Match")),
column(8,
uiOutput("matchParameters")
))
)
runApp('nPOD/nPOD-App/DIVE')
removeUI("#matchUI", immediate = T)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
fluidPage(fluidRow(
column(1,
br(),
actionButton("guideMatch", "Guide", icon = icon("info-circle"))
),
column(1,
h3("CohortX"),
helpText("(your cohort)")
),
column(2,
div(id = "cohortInput",
textInput("cohortName", "Your cohort name/label (optional)", value = "", placeholder = "e.g. 'DiViD', 'pilot'.."),
fileInput("cohortDataUpload",  HTML("<strong>Upload data to begin</strong>"), multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv"),
buttonLabel = "Data")
)
),
column(1,
br(),
checkboxInput("outsideCohort", "non-nPOD cohort", value = T),
br(),
br(),
actionLink("cohortDataRequirements", icon = icon("exclamation"), "Data requirements")
),
column(1
),
column(6
)),
fluidRow(
column(1
),
column(1, style="border-top: 1px solid lightgray;",
br(),
h3("nPOD")
),
column(2, style="border-top: 1px solid lightgray;",
br(),
div(id = "nPODInput",
selectInput("matchType", "Type of matches to get from nPOD",
choices = list("No diabetes (negative control)" = c(`No-diabetes donors` = "ND"),
"T1D (positive control)" = c(`T1D donors` = "T1D"),
"Other" = c(`T2D donors` = "T2D", `Autoantibody-positive donors` = "AAb")))
)
),
column(2),
column(6,
div(id = "npodgraph", style="margin-top: -220px; z-index: 0; height: 500px;", plotlyOutput("npodgraph")),
div(style="position: absolute; margin-top: -200px; margin-left: -140px; top:0; left:0; z-index: 1;",
plotlyOutput("nPie"))
)),
fluidRow(
column(1),
column(11, style="padding-top: 20px;",
uiOutput("matchUI")
)
),
fluidRow(style="margin-top: 20px; padding-bottom: 50px;",
column(5, style="padding-right: 50px;",
uiOutput("matchResult")
),
column(3,
uiOutput("advancedMatchResult")
),
column(4,
uiOutput("advancedMatchResult2")
)
)
)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
ggplot()
library(ggplot)
library(ggplot2)
ggplot()
load("~/Documents/Met/wgcna.Rdata")
shiny::runApp('nPOD/nPOD-App/app')
runApp('nPOD/nPOD-App/app')
max(c(NA, 1, 2, 3))
NA > 5
NA >= 5
1:5[c(NA, 3, 5)]
c(NA, 3, 5, 3, 4, 5) > 3
test <- data.frame(x = 1:3, y = 3:1)
ggplot(test) + geom_point()
runApp('nPOD/nPOD-App/Test-dev/match')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
devtools::load_all()
setwd("~/DIVE")
devtools::load_all()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
BiocManager::install("recount", version = "3.8")
library("recount")
project_info <- abstract_search("GSE106148")
project_info
project_info <- abstract_search("GSE109285")
project_info <- abstract_search("GSE73727")
library("rentrez")
entrez_db_searchable("GEO")
entrez_dbs()
page <- read_html("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE73727")
library(rvest)
page <- read_html("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE73727")
gds_search <- entrez_search(db = "gds", term = paste0("GSE57214," "[ACCN] AND gse[ETYP]"))
gse <- "GSE73727"
gds_search <- entrez_search(db = "gds", term = paste0("GSE57214", "[ACCN] AND gse[ETYP]"))
gds_search$ids
gds_search <- entrez_search(db = "gds", term = paste0(gse, "[ACCN] AND gse[ETYP]"))
term <- paste0(gse, "[ACCN] AND gse[ETYP]")
term
gds_search <- entrez_search(db = "gds", term = term)
gds_search
gds_search$ids
entrez_summary(db = "gds", id = gds_search$ids)
entrez_summary(db = "gds", id = gds_search$ids)
result <- entrez_summary(db = "gds", id = gds_search$ids)
result <- entrez_summary(db = "gds", id = gds_search$ids)
result$relations
result$extrelations
result$extrelations[result$extrelations == "SRA", ]$targetobject
sra <- result$extrelations[result$extrelations == "SRA", ]$targetobject
download_study(sra)
getwd()
setwd("~/Documents")
download_study(sra, download = F)
url <- download_study(sra, download = F)
link <- download_study(sra, download = F)
rm(url)
load(url(link))
head(rse_gene)
colData(rse_gene)
link <- download_study(sra, type = "counts-gene", download = F)
load(url(link))
gzcon(url(link))
gzcon(link)
tsv <- gzcon(url(link))
raw <- textConnection(readLines(tsv))
close(tsv)
counts <- fread(raw)
head(raw)
raw
close(raw)
con <- gzcon(url(link))
tsv <- textConnection(readLines(tsv))
counts <- read.table(tsv, sep = "\t")
close(con)
close(tsv)
head(counts)
con <- gzcon(url(link))
tsv <- textConnection(readLines(tsv))
counts <- read.table(tsv, sep = "\t", header = T)
close(con)
close(tsv)
con <- gzcon(url(link))
tsv <- textConnection(readLines(tsv))
counts <- read.table(tsv, sep = "\t", header = T)
con <- gzcon(url(link))
tsv <- textConnection(readLines(tsv))
counts <- read.table(tsv, sep = "\t", header = T)
close(con)
close(tsv)
head(counts)
colData(rse_gene)$geo_accession
head(rse_gene)
assays(rse_gene)
head(assay(rse))
head(assay(rse_gene))
gse <- getGEO("GSE106148"
)
library(GEOquery)
gse <- getGEO("GSE106148")
Meta(gse)
eset <- gse[[1]]
Meta(eset)
Meta(gse)
gse
experimentData(gse)
assayData(gse)
gpl <- getGEO(Biobase::annotation(eset)))
gpl <- getGEO(Biobase::annotation(eset))
gpl
varMetadata(gse)
gse
phenoData(gse)
pData(gse)
phenoData(eset)
varMetadata(eset)
varLabels(eset)
Meta(gse)
class(gse)
gse <- getGEO("GSE106148")
Meta(gse)
class(gse)
GSMList(gse)
GSMList(gse)[[1]]
eset <- gse[[1]]
getwd()
setwd("~/DIVE")
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
gse <- getGEO("GSE73727")
eset <- gse[[1]]
gpl <- GEOquery::Table(GEOquery::getGEO(Biobase::annotation(eset)))
Tale(gpl)
Table(gpl)
gpl <- GEOquery::Table(GEOquery::getGEO(Biobase::annotation(eset)))
gpl
length(gpl)
data.frame(Gene = 1:3)
devtools::load_all()
multiVAppRun()
meta <- otherInfo(experimentData(eset))
sra <- regmatches(meta$relation, regexpr("(https://www.ncbi.nlm.nih.gov/sra?term=)?SRP[0-9]+", meta$relation))
link <- recount::download_study(sra, download = F)
load(url(link))
link
load(url(link))
rse_gene
colData(rse_gene)
Columns(rse_gene)
rse_gene
rowData(rse_gene)
colData(rse_gene)
library(recount)
colData(rse_gene)
rowData(rse_gene)
rse_gene
head(colData(rse_gene))
colData(rse_gene)$characteristis
colData(rse_gene)$characteristics
colData(rse_gene)$characteristics[[1]]
colData(rse_gene)$characteristics[1]
head(assay(rse_gene))
geochar <- lapply(split(colData(rse_gene), seq_len(nrow(colData(rse_gene)))), geo_characteristics)
geochar
head(split(colData(rse_gene), seq_len(nrow(colData(rse_gene)))))
geo_characteristics(colData(rse_gene)$characteristics)
geo_characteristics(colData(rse_gene))
tryCatch(sqrt(c(4, 9, "haha")), error=function(e))
tryCatch(sqrt(c(4, 9, "haha")), error=function(e) NULL)
tryCatch(sqrt(c(4, 9, "haha")), error=function(e) {} )
tryCatch(sqrt(c(4, 9, "haha")), error=function(e) print("error") )
tryCatch(sqrt(c(4, 9, "haha")), error=function(e)  )
tryCatch(sqrt(c(4, 9, "haha")), error=function(e) { print("error") } )
x <- tryCatch(sqrt(c(4, 9, "haha")), error=function(e) { print("error") } )
x
nrow(NULL)
nrow(NA)
data.frame
data.frame()
httr::RETRY
recount::download_study("", download = F)
recount::download_study(a, download = F)
getRecount <- function(sra) {
link <- recount::download_study(sra, download = F)
result <- NULL
tryCatch(load(url(link)), error = function(e) stop(e))
xdata <- SummarizedExperiment::assay(rse_gene)
pdata <- geo_characteristics(colData(rse_gene))
return(list(xdata = xdata, pdata = pdata))
}
getRecount("x")
getRecount <- function(sra) {
link <- recount::download_study(sra, download = F)
result <- NULL
tryCatch(load(url(link)), error = function(e) "Whoops")
xdata <- SummarizedExperiment::assay(rse_gene)
pdata <- geo_characteristics(colData(rse_gene))
return(list(xdata = xdata, pdata = pdata))
}
getRecount("x")
getRecount <- function(sra) {
link <- recount::download_study(sra, download = F)
result <- NULL
tryCatch(load(url(link)), error = function(e) stop("Whoops"))
xdata <- SummarizedExperiment::assay(rse_gene)
pdata <- geo_characteristics(colData(rse_gene))
return(list(xdata = xdata, pdata = pdata))
}
getRecount("x")
getRecount <- function(sra) {
link <- recount::download_study(sra, download = F)
attempt <- 0
while(attempt <= 1) {
attempt <- attempt + 1
try(load(url(link)), silent = T)
}
xdata <- SummarizedExperiment::assay(rse_gene)
pdata <- geo_characteristics(colData(rse_gene))
return(list(xdata = xdata, pdata = pdata))
}
getRecount("x")
getRecount <- function(sra) {
link <- NULL
try(link <- recount::download_study(sra, download = F))
if(!is.null(link)) {
attempt <- 0
while(attempt <= 1) {
attempt <- attempt + 1
try(load(url(link)), silent = T)
}
load(url(link))
xdata <- SummarizedExperiment::assay(rse_gene)
pdata <- geo_characteristics(colData(rse_gene))
return(list(xdata = xdata, pdata = pdata))
}
}
getRecount("x")
getRecount <- function(sra) {
link <- NULL
try(link <- recount::download_study(sra, download = F), silent = T)
if(!is.null(link)) {
attempt <- 0
while(attempt <= 1) {
attempt <- attempt + 1
try(load(url(link)), silent = T)
}
load(url(link))
xdata <- SummarizedExperiment::assay(rse_gene)
pdata <- geo_characteristics(colData(rse_gene))
return(list(xdata = xdata, pdata = pdata))
}
}
getRecount("x")
is.null(getRecount("x"))
pdata <- pData(eset)
pdata
charts <- grep("::", names(pdata), value = T)
charts
pdata[, charts]
charts <- grep("::", names(pdata))
charts
pdata[, charts]
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
names(colData(rse_gene))
colData(rse_gene)$sample
head(colData(rse_gene))
devtools::load_all()
multiVAppRun()
