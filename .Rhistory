subP <- function(data) {
cols <- grep("title|geo_accession|source_name|description|platform|characteristics|treatment", names(data))
data <- data[, cols]
data <- lapply(data, function(x) gsub("\n", " ", x))
as.data.table(data)
}
export <- lapply(results, subP)
export <- rbindlist(export, fill = T)
export[, GSE := unlist(mapply(rep, gses, sapply(results, nrow)))]
newcols1 <- c("xpType", "RefDye", "Comment", "Group", "Batch", "Node", "NodeFunction", "BSM", "BSMDCD", "BSMDCD2", "BioSampName")
export[, (newcols1) := ""]
export[, c("Ignore") := 0]
export[, c("XP") := 1]
export[, xpType := ixpType]
export[, isCTRL := iCTRL]
export[, BioSampName := iBiosamp]
export[, BSMDCD := iDCD]
export[, BSMDCD2 := iDCD2]
neworder <- c("GSE", newcols1[1:4], "Ignore", "XP", "isCTRL", newcols1[5:11],
"title", "geo_accession", grep("^source|treatment", names(export), val = T),
grep("^char", names(export), val = T), "platform_id", grep("^desc", names(export), val = T))
setcolorder(export, neworder)
head(export)
write.table(export, REVIEW1, sep = "\t", row.names = F, quote = F)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/makeContrasts.R")
REVIEW2 <- "sample_review2.txt"
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt"
dt <- makeGroupLabels(REVIEWTAB)
dt <- makeGroupLabels(REVIEW2)
unique(dt[, .(GSE, Group, Node, NodeFunction, BSM, BSMDCD, BioSampName)]) # check
contrasts <- makeContrasts(dt)
contrasts[]
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/makeContrasts.R")
# Input:
REVIEW2 <- "sample_review2.txt"
# Output files:
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt"
write.table(dt, REVIEW3, sep = "\t", row.names = F, quote = F)
write.table(contrasts, CONTRASTS, sep = "\t", row.names = F, quote = F)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/fitter.R")
datadir <- "GEOtemp/"
resultsdir <- "Results/"
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt"
DT <- fread(REVIEW3)
DT <- DT[GSE != "", 1:17]
setkey(DT, GSE)
contrasts <- fread(CONTRASTS, colClasses = c("RefDye" = "character", "Comment" = "character", "Group" = "character", "Batch" = "character",
"Node" = "character", "NodeFunction" = "character"))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/fitter.R")
datadir <- "GEOtemp/"
resultsdir <- "Results/"
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt.csv"
DT <- fread(REVIEW3)
DT <- DT[GSE != "", 1:17]
setkey(DT, GSE)
contrasts <- fread(CONTRASTS, colClasses = c("RefDye" = "character", "Comment" = "character", "Group" = "character", "Batch" = "character",
"Node" = "character", "NodeFunction" = "character"))
shiny::runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colors = pal, legendgroup = ~Label, showlegend = FALSE)
scale_color_viridis(px2$nlogP.AABvsHC)
library(viridis)
scale_color_viridis(px2$nlogP.AABvsHC)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colors = "viridis", legendgroup = ~Label, showlegend = FALSE)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colorscale = "viridis", legendgroup = ~Label, showlegend = FALSE)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colorscale = "magma", legendgroup = ~Label, showlegend = FALSE)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, legendgroup = ~Label, showlegend = FALSE)
colorscale <- magma(px2$nlogP.AABvsHC)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, legendgroup = ~Label, colors = colorscale, showlegend = FALSE)
magma(3)
colorscale <- scale_color_viridis(px2$nlogP.AABvsHC)
head(colorscale)
colorscale
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, legendgroup = ~Label, colors = colorscale, showlegend = FALSE)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
FALSE + 1
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
.a <- test
.a < ""
.a
a. <- ""
rm(a.)
.a <- "list"
.a
rm(.a)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
head(gx$Gene)
shiny::runApp('nPOD/nPOD-App/DIVE')
shiny::runApp('nPOD/nPOD-App/DIVE')
removeUI("#matchUI",immediate = T)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
req(!is.null(cohortdata$matchOpts))
runApp('nPOD/nPOD-App/DIVE')
tags$div(
fluidRow(
column(2,
HTML("<strong>Data fusion/parameter selection</strong><br>"),
helpText("All covariates guessed as shared by both datasets are used as match parameters, which does not necessarily represent the user-desired default.
Parameters can be adjusted in a drag-and-drop manner, i.e. bring over and connect those that should be used.")
),
column(2,
HTML("<strong>You are matching on</strong>"),
verbatimTextOutput("matchOn", placeholder = TRUE),
actionButton("match", "Match")),
column(8,
uiOutput("matchParameters")
))
)
runApp('nPOD/nPOD-App/DIVE')
removeUI("#matchUI", immediate = T)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
fluidPage(fluidRow(
column(1,
br(),
actionButton("guideMatch", "Guide", icon = icon("info-circle"))
),
column(1,
h3("CohortX"),
helpText("(your cohort)")
),
column(2,
div(id = "cohortInput",
textInput("cohortName", "Your cohort name/label (optional)", value = "", placeholder = "e.g. 'DiViD', 'pilot'.."),
fileInput("cohortDataUpload",  HTML("<strong>Upload data to begin</strong>"), multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv"),
buttonLabel = "Data")
)
),
column(1,
br(),
checkboxInput("outsideCohort", "non-nPOD cohort", value = T),
br(),
br(),
actionLink("cohortDataRequirements", icon = icon("exclamation"), "Data requirements")
),
column(1
),
column(6
)),
fluidRow(
column(1
),
column(1, style="border-top: 1px solid lightgray;",
br(),
h3("nPOD")
),
column(2, style="border-top: 1px solid lightgray;",
br(),
div(id = "nPODInput",
selectInput("matchType", "Type of matches to get from nPOD",
choices = list("No diabetes (negative control)" = c(`No-diabetes donors` = "ND"),
"T1D (positive control)" = c(`T1D donors` = "T1D"),
"Other" = c(`T2D donors` = "T2D", `Autoantibody-positive donors` = "AAb")))
)
),
column(2),
column(6,
div(id = "npodgraph", style="margin-top: -220px; z-index: 0; height: 500px;", plotlyOutput("npodgraph")),
div(style="position: absolute; margin-top: -200px; margin-left: -140px; top:0; left:0; z-index: 1;",
plotlyOutput("nPie"))
)),
fluidRow(
column(1),
column(11, style="padding-top: 20px;",
uiOutput("matchUI")
)
),
fluidRow(style="margin-top: 20px; padding-bottom: 50px;",
column(5, style="padding-right: 50px;",
uiOutput("matchResult")
),
column(3,
uiOutput("advancedMatchResult")
),
column(4,
uiOutput("advancedMatchResult2")
)
)
)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
ggplot()
library(ggplot)
library(ggplot2)
ggplot()
load("~/Documents/Met/wgcna.Rdata")
shiny::runApp('nPOD/nPOD-App/app')
runApp('nPOD/nPOD-App/app')
max(c(NA, 1, 2, 3))
NA > 5
NA >= 5
1:5[c(NA, 3, 5)]
c(NA, 3, 5, 3, 4, 5) > 3
test <- data.frame(x = 1:3, y = 3:1)
ggplot(test) + geom_point()
runApp('nPOD/nPOD-App/Test-dev/match')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
runApp('nPOD/nPOD-App/Test-dev/corr')
setwd("~/DIVE")
devtools::load_all()
hdlist <- list(`Gene expression` = c(`Yip et al. (unpublished)` = xm_t),
`Protein expression` = c(`Nyalwidhe et al. 2017` = px1_t,
`Liu et al. 2016` = px2_t))
lapply(hdlist, function(x) names(hdlist))
hdlist <- list(`Gene expression` = list(`Yip et al. (unpublished)` = xm_t),
`Protein expression` = list(`Nyalwidhe et al. 2017` = px1_t,
`Liu et al. 2016` = px2_t))
lapply(hdlist, function(x) names(hdlist))
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
px1_t[, FALSE, drop = F]
test <- px1_t[, FALSE, drop = F]
length(test)
devtools::load_all()
multiVAppRun()
test <- px1_t[, colnames(px1_t) %in% "abc", drop = F]
test
length(NULL)
devtools::load_all()
length(NULL)
multiVAppRun()
length(NULL)
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
ncol(test)
devtools::load_all()
multiVAppRun()
length(NULL) < 1
devtools::load_all()
multiVAppRun()
px1_t[, colnames(px1_t) %in% "3630", drop = F]
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
head(gene_symbols)
gene_symbols_map <- setNames(names(gene_symbols), nm = gene_symbols)
head(gene_symbols_map)
usethis::use_data(gene_symbols_map)
devtools::load_all()
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
ncol(NULL)
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
library(GEOquery)
exp <- getGEO("GSE45515")
gse <- getGEO("GSE45515")
ie_proxy_info()
cur::ie_proxy_info()
curl::ie_proxy_info()
proxy_url <- "http://127.0.0.1:61387/"
Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)
gse <- getGEO("GSE45515")
Sys.setenv(http_proxy = "", https_proxy = "", ftp_proxy = "")
gse <- getGEO("GSE45515")
gse <- "GSE72492"
gse <- getGEO(gse) ## No bioconductor package is available, so use the GPL
runApp('inst')
gse <- getGEO("GSE45515")
gse <- getGEO("GSE45515")
gse <- getGEO("GSE45515")
multiVAppRun()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
test <- list("Yip et al. (unpublished)" = xm_t,
"Nyalwidhe et al. 2017" = px1_t,
"Liu et al. 2016" = px2_t)
names(test)
rm(test)
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
runApp('~/nPOD/dev')
runApp('~/nPOD/dev')
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
multiVAppRun()
devtools::load_all()
devtools::load_all()
multiVAppRun()
runApp('inst')
runApp('~/nPOD/nPOD-App/app')
multiVAppRun()
