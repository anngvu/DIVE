mygene::query("MafA", species = "human", fields = "symbol,name,uniprot")
mygene::query("phospho-Histone H3 (Ser10) Mitosis Marker", species = "human", fields = "symbol,name,uniprot")
mygene::query("phospho-Histone H3 (Ser10)", species = "human", fields = "symbol,name,uniprot")
mygene::query("phospho-Histone H3", species = "human", fields = "symbol,name,uniprot")
mygene::query("CD31", species = "human", fields = "symbol,name,uniprot")
library(diagrammeR)
install.packages("diagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
DiagrammeR::grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10, rankdir = LR]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
A [label = 'Methods text']
# 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
A [label = 'Methods text']
# 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
{S1, S2}->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
{S1 S2}->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
S1->M1 S2->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
S1->M1 S2->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get data for Antibody Registry']
# 'edge' statements
S1->M1 S2->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get data for Antibody Registry']
# 'edge' statements
{S1 S2}->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get common data from AbRegistry']
M3 [label = 'Populate properties programmatically']
M4 [label = 'Check and fill in properties manually']
E1 [label = 'To JSON']
E2 [label = 'Validate JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1 E1->E2
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Get data from AbRegistry']
M3 [label = 'Populate properties programmatically']
M4 [label = 'Check and fill in properties manually']
E1 [label = 'To JSON']
E2 [label = 'Validate JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1 E1->E2
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Get data from AbRegistry']
M3 [label = 'Populate properties']
M4 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M3 [label = 'Populate properties with DB sources and API']
M4 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Technology_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
M4 [label = 'Register technology if appropriate']
M5 [label = 'Update record with RRID']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->M4 M4->M5 M5->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods/Supplemental text']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
node [shape = circle,
fontname = Helvetica]
S1
S1 [label = 'Methods/Supplemental text']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods/Supplemental text', shape = oval]
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text', shape = oval]
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Technology_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Abstract/Discussion/full text', shape = oval]
M3 [label = 'Check and fill in properties manually']
M4 [label = 'Register technology if appropriate']
M5 [label = 'Update record with RRID']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->M4 M4->M5 M5->E1
}
")
shiny::runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
sample(c("Yes", "No"), size = 94, replace = T)
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
install.packages("sourcetools")
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
setwd("~/DIVE")
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
devtools::load_all()
interactiveMatrixAppRun()
metadata$VarID[ metadata$VarID %in% "Cpeptide" ]
metadata$VarID[ metadata$VarID %in% "sex" ]
devtools::load_all()
metadata$VarID[ metadata$VarID %in% "sex" ]
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
nrow()
if(nrow())
)
devtools::load_all()
)
devtools::load_all()
)
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
30 * 32
960 * 2
devtools::load_all()
960 * 2
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
devtools::load_all()
interactiveMatrixAppRun()
nrow(matrix())
