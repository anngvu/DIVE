colorbar = list(title = "relative\nexpression", thickness = 10, x = -0.09)) %>%
layout(xaxis = list(type = "category", showgrid = FALSE, ticks = "", showticklabels = showticklabs),
yaxis = list(type = "category", ticks = ""))
}
zhm <- expHeatmap(z)
zhm
expHeatmap <- function(z) {
xlabs <- colnames(z)
ylabs <- rownames(z)
# infer color scale for type of data; min = 0 -> RNA-seq counts; everything else should be log-Fc
if(min(z) == 0) colorscale <- "Greys" else colorscale <- "RdBu"
# only show labels when readable
showticklabs <- if(ncol(z) <= 50) TRUE else FALSE
# tickfont=dict(family='Rockwell', color='crimson', size=14)
plot_ly(z = z, x = xlabs, y = ylabs, name = "Expression\nMatrix",
type = "heatmap", colors = colorscale,
hovertemplate = "transcript/protein: <b>%{x}</b><br>sampleID: <b>%{y}</b><br>expression: <b>%{z}</b>",
colorbar = list(title = "relative\nexpression", thickness = 10, x = -0.2)) %>%
layout(xaxis = list(type = "category", showgrid = FALSE, ticks = "", showticklabels = showticklabs),
yaxis = list(type = "category", ticks = ""))
}
zhm <- expHeatmap(z)
zhm
dx
dxf <- dx
dx <- dendextend::as.ggdend(clusts_dend)
dxlabs <- dx$labels
dxlabs
dx$nodes
dx
dx <- dendextend::as.ggdend(clusts_dend)
dx <- dx$segments
dx
dxf <- dx
dxf$y <- letters[factor(dxf$y)]
dxf$xyend <- letters[factor(dxf$yend)]
dxf
dxf$yend <- letters[factor(dxf$yend)]
dxf
dxf <- dx
dxf$x <- letters[factor(dxf$x)]
dxf$xend <- letters[factor(dxf$xend)]
dxf
segtest <- plot_ly() %>% add_segments(data = dxf, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE)
segtest
dx
xl <- unique(c(dx$x, dx$xend))
dxf <- dx
dxf$x <- letters[factor(dxf$x, levels = xl)]
dxf$xend <- letters[factor(dxf$xend, levels = xl)]
segtest <- plot_ly() %>% add_segments(data = dxf, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE)
segtest
xl <- sort(unique(c(dx$x, dx$xend)))
# dxlabs <- dx$labels
dxf <- dx
dxf$x <- letters[factor(dxf$x, levels = xl)]
dxf$xend <- letters[factor(dxf$xend, levels = xl)]
segtest <- plot_ly() %>% add_segments(data = dxf, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE)
segtest
hdend <- as.dendrogram(clusts_dend)
hdend
hdend <- as.dendrogram(clusts_dend, horizontal = T)
hdend
hdend <- as.dendrogram(clusts_dend, horiz = T)
hdend
plot(hdend)
plot(hdend, horiz = TRUE)
hdend <- as.dendrogram(clusts_dend, center = T)
plot(hdend, horiz = TRUE)
dx
dx <- dendextend::as.ggdend(clusts_dend)
dx$nodes
dxf
dx$labels
dendextend::get_nodes_xy(clusts_dend)
labels(cluts_dend)
labels(clusts_dend)
get_nodes_attr(clusts_dend)
dendextend::get_nodes_attr(clusts_dend)
dendextend::get_nodes_attr(clusts_dend, "height")
dendextend::get_nodes_attr(clusts_dend, "label")
dendextend::get_nodes_attr(clusts_dend, "order")
segtest <- plot_ly() %>% add_segments(data = dxf, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE) %>%
layout(xaxis = list(tickvals = c("i", "g", "e", "c", "a")))
segtest
segtest <- plot_ly() %>% add_segments(data = dxf, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE) %>%
layout(yaxis = list(tickvals = c("i", "g", "e", "c", "a")))
segtest
segtest <- plot_ly() %>% add_segments(data = dxf, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE)
subplot(zhm, segtest, shareY = TRUE)
xl
dendextend::get_nodes_attr(clusts_dend, "width")
dendextend::get_nodes_attr(clusts_dend, "midpoint")
dx$nodes
dx$segments
dx$nodes[order(dx$nodes$x)]
dx$nodes[order(dx$nodes$x), ]
labels(clusts_dend)
dendextend::get_nodes_attr(clusts_dend, "order")
dendextend::get_nodes_attr(clusts_dend, "label")
dendextend::get_nodes_attr(clusts_dend, "order")[order(dx$nodes$x)]
dendextend::get_nodes_attr(clusts_dend, "label")[order(dx$nodes$x)]
# nodes table starting from root so first coords start somewhere in the middle
# get nodes in order of left-to-right (or top-to-bottom for horizontal dendograms)
ltr <- order(dx$nodes$x)
ltr
ltrnodes <- dendextend::get_nodes_attr(clusts_dend, "label")[ltr]
ltrnodes
ltrx <- dx$nodes$x[ltr]
ltrx
# replace numeric x with categorical x for subplotting
ltrx[!is.na(ltrnodes)] <- ltrnodes[!is.na(ltrnodes)]
ltrx
dx$nodes
dx$segments
segments <- dx$segments
segments <- segments[rder(segments$x)]
segments <- segments[order(segments$x)]
segments <- segments[order(segments$x), ]
segments
ltrx
ltrnodes
ltrx <- dx$nodes$x[ltr]
ltrx
names(ltrx) <- ltrnodes
ltrx
test <- factor(segments$x, levels = ltrx)
test
test <- factor(segments$x, levels = ltrx, labels = ltrnodes)
teset
test
ltrnodes
ltrnodes[is.na(ltrnodes)]
length(is.na(ltrnodes))
length(ltrnodes[is.na(ltrnodes)])
paste("cluster", 1:length(is.na(ltrnodes)))
paste0("cluster", 1:length(ltrnodes[is.na(ltrnodes)]))
ltrnodes[is.na(ltrnodes)] <- paste("cluster", 1:length(is.na(ltrnodes)))
# leaf nodes have labels, non-leaf nodes are NA and so must create labels
# which are just generically "cluster1", "cluster2", etc.
# might want to name one of these clusters as root using height info
ltrnodes <- dendextend::get_nodes_attr(clusts_dend, "label")[ltr]
ltrnodes[is.na(ltrnodes)] <- paste("cluster", 1:length(ltrnodes[is.na(ltrnodes)]))
ltrnodes
# leaf nodes have labels, non-leaf nodes are NA and so must create labels
# which are just generically "cluster1", "cluster2", etc.
# might want to name one of these clusters as root using height info
ltrnodes <- dendextend::get_nodes_attr(clusts_dend, "label")[ltr]
ltrnodes[is.na(ltrnodes)] <- paste0("cluster", 1:length(ltrnodes[is.na(ltrnodes)]))
ltrnodes
segments$x <- factor(segments$x, levels = ltrx, labels = ltrnodes)
segments
segments$xend <- factor(segments$xend, levels = ltrx, labels = ltrnodes)
segments
segtest <- plot_ly() %>% add_segments(data = segments, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE)
segtest
subplot(zhm, segtest, shareY = TRUE)
subplot(segtest, zhm, shareY = TRUE)
subplot(zhm, segtest, shareY = TRUE) %>% layout(yaxis = list(tickvals = c("b", "e", "c", "a", "d")))
subplot(zhm, segtest)
z
zhm <- plot_ly(type = "heatmap", z = z)
zhmp
zhm
zhm <- plot_ly(type = "heatmap", z = z, x = letters[1:5])
zhm
dendextend::as.ggdend(clusts_dend)$segments
getwd()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
shapes <- list(
list(
x0 = 0,
x1 = 0,
y0 = 0,
y1 = 0.4567141530112327,
line = list(
color = "grey",
width = 1
),
type = "line",
xref = "x",
yref = "y"
),
list(
x0 = 1,
x1 = 1,
y0 = 0,
y1 = -0.09826430117118465,
line = list(
color = "grey",
width = 1
)
)
)
test <- plotly_empty() %>% layout(shapes = shapes)
test
plotly_json(test)
plotly_json(segp)
segments
# lines <- apply(segments, 1, function(s) list(x0 = s["x"], x1 = s[]))
segments <- dx$segments
segments
# lines <- apply(segments, 1, function(s) list(x0 = s["x"], x1 = s[]))
segments <- dx$segments[, 1:4]
segments
names(segments) <- c("x0", "y0", "x1", "y1")
segments <- apply(segments, 1, list)
segments
segments <- dx$segments[, 1:4]
names(segments) <- c("x0", "y0", "x1", "y1")
apply(segments, 1, as.list)
test <- apply(segments, 1, as.list)
test[[]]
test[[1]]
test <- apply(segments, 1, function(x) c(as.list(x), line = list(color = "gray", width = 2)))
test[[1]]
test <- apply(segments, 1, function(x) c(as.list(x), list(line = list(color = "gray", width = 2))))
test[[1]]
linetype <- list(line = list(color = "gray", width = 2), type = "line",
xref = "x", yref = "y")
test <- apply(segments, 1, function(x) c(as.list(x), linetype))
test[[1]]
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
clust <- hclust(as.dist(z))
clust
runApp('../DIVE-dev/proxyMatrix')
shiny::runApp('../DIVE-dev/proxyMatrix')
expHeatmap <- function(z) {
xlabs <- colnames(z)
ylabs <- rownames(z)
yind <- 1:nrow(z)
# infer color scale for type of data; min = 0 -> RNA-seq counts; everything else should be log-Fc
if(min(z) == 0) colorscale <- "Greys" else colorscale <- "RdBu"
# only show labels when readable
showticklabs <- if(ncol(z) <= 50) TRUE else FALSE
# tickfont=dict(family='Rockwell', color='crimson', size=14)
plot_ly(z = z, x = xlabs, y = yind, name = "Expression\nMatrix",
type = "heatmap", colors = colorscale,
hovertemplate = "transcript/protein: <b>%{x}</b><br>sampleID: <b>%{y}</b><br>expression: <b>%{z}</b>",
colorbar = list(title = "relative\nexpression", thickness = 10, x = -0.2)) %>%
layout(xaxis = list(type = "category", showgrid = FALSE, ticks = "", showticklabels = showticklabs),
yaxis = list(tickvals = yind, ticktext = ylabs))
}
runApp('../DIVE-dev/proxyMatrix')
z <- matrix(sample(1:100, 25, replace = TRUE), nrow = 5)
rownames(z) <- letters[1:5]
colnames(z) <- LETTERS[1:5]
expHeatmap(z)
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
hclust(dist(z))
dendextend::as.ggdend(hclust(dist(z)))
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
clusts <- hclust(dist(z))
dx <- dendextend::as.ggdend(as.dendrogram(clusts))
segments <- dx$segments[, 1:4]
segtest <- plot_ly() %>% add_segments(data = segments, x = ~y, y = ~x, xend = ~yend, yend = ~xend, showlegend = FALSE)
segtest
plotly_json(segtest)
zsub <- subplot(plotly_empty(), expHeatmap(z))
plotly_json(zsub)
defaultDendro <- function(clust, name = "Samples", width = NULL, height = NULL, bgcolor = "white", reversed = TRUE) {
dendro <- as.dendrogram(clust)
segments <- dendextend::as.ggdend(dendro)$segments
axis_ <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
pdendro <- plot_ly() %>%
add_segments(data = segments, x = ~y, y = ~x, xend = ~yend, yend = ~xend, name = name, showlegend = FALSE) %>%
layout(xaxis = c(axis_, list(autorange = if(reversed) "reversed" else TRUE)), yaxis = axis_,
paper_bgcolor = bgcolor, plot_bgcolor = bgcolor,
margin = list(b = 0, t = 0, r = 5, l = 5))
return(pdendro)
}
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
dendata <- defaultDendro(clusts)$x$data
defaultDendro(clusts)
x <- defaultDendro(clusts)
x$x
x$x$visdat
x$x$cur_data
str(x)
plotly_data(x)
x$x$source
zsub$x$data
x <- subplot(x)
x$x$data
runApp('../DIVE-dev/proxyMatrix')
dendata <- subplot(defaultDendro(clusts))$x$data
dendata
dendata$x
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
data <- segments
idx <- rep(seq_len(NROW(data)), each = 2)
idx
dat <- as.data.frame(data[!grepl("^xend$|^yend", names(data))])
head(dat)
dat <- dat[idx, ]
idx2 <- seq.int(2, NROW(dat), by = 2)
idx2
dat[idx2, "x"] <- data[["xend"]]
dat[idx2, "y"] <- data[["yend"]]
dat
group_by(dat, seq_len(NROW(data)))
idx <- rep(seq_len(NROW(data)), each = 2)
gr <- seq_len(NROW(data))
data$gr <- seq_len(NROW(data))
head(data)
dat <- as.data.frame(data[!grepl("^xend$|^yend", names(data))])
dat <- dat[idx, ]
dat
dat[idx2, "x"] <- data[["xend"]]
dat[idx2, "y"] <- data[["yend"]]
dat
group_by(dat, gr)
dendata
zsub$x$data
dendata <- subplot(defaultDendro(clusts))$x$data
dendata
df <- data.frame(dendata[[1]]$x, dendata[[1]]$y)
df
head(dat)
head(segments)
plot_ly(type = "scatter", mode = "lines", data = dat, x = ~x, y = ~y)
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
clusts$order
clusts$labels
seq_len(clusts$labels)
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
devtools::install()
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('../DIVE-dev/proxyMatrix')
round(1.5*.1111)
round(1.5*1.1111)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
plotly_json(plotly_example())
plotly_json(plotly_empty())
plot_ly(type = "scatter", mode = "markers", x = NULL, y = NULL)
plotly_empty %>% layout(yaxis = list(showticks = TRUE))
plotly_empty() %>% layout(yaxis = list(showticks = TRUE))
runApp('../DIVE-dev/proxyMatrix')
runApp('../DIVE-dev/proxyMatrix')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('../DIVE-dev/proxyMatrix')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
getwd()
setwd("~/DIVE")
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
seq_len(1:5)
seq_len(5)
seq_len(x)
seq_len(gr)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
plotly_empty(type = "markers")
plotly_empty(type = "scatter")
plotly_empty(type = "scatter", mode = "scatter")
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
