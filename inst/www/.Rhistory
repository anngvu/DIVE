runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
jqui_sortable
jqui_interaction
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
setwd("~/nPOD-Dev/visNetwork/varGraph")
oneSort <- function(inputId, label, items,
connect, item_class, placeholder = "n/a", width = "30px") {
placeholder <- sprintf('#%s:empty:before{content: "%s"; font-size: 14px; opacity: 0.5;}',
inputId, placeholder)
placeholder <- shiny::singleton(shiny::tags$head(shiny::tags$style(shiny::HTML(placeholder))))
label <- shiny::tags$label(label, `for` = inputId)
tagsBuilder <- function(value, label) {
tag <- shiny::tags$div(
`data-value` = value,
class = item_class,
style = "margin: 1px",
label)
}
style <- sprintf("width: %s; font-size: 0px; min-height: 25px;", width)
container <- shiny::tags$div(id = inputId, style = style, class = item_class, ...)
container <- shiny::tagSetChildren(container, list = item_tags)
return(shiny::tagList(dep, placeholder, label, container))
}
runApp()
runApp()
runApp()
runApp()
oneSort("test", "Test1", items = letters[1:5])
runApp()
runApp()
runApp()
oneSort("test", "Test1", items = letters[1:5])
runApp()
runApp()
runApp()
install.packages("shinyjs")
runApp()
runApp()
runApp()
htmltools::htmlDependency(
name       = "jqueryui",
version    = "1.12.1",
package    = "shiny",
src        = "www/shared/jqueryui",
script     = "jquery-ui.min.js",
stylesheet = "jquery-ui.css"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("#", paste("test1", "test2", sep = ", "))
paste("#", c("test1", "test2"), sep = ", "))
paste("#", c("test1", "test2"), sep = ", ")
paste0("#", c("test1", "test2"), collapse = ", ")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tags$input()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/DIVE/inst/www")
devtools::install()
runApp('~/nPOD-Dev/visNetwork/varGraph')
list(a = 1)[[ 4]]
list(a = 1)[[ "b"]]
devtools::install()
devools::document()
devtools::document()
`rm(list = c("consortUI"))`
rm(list = c("consortUI"))
devtools::document()
devtools::install()
runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
consortUI("x", "x")
textInput("test", h3("test"))
textInput("test", h4(icon("unlink"), "Not used"))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
system.file("www/consortUIBinding.js", package = "DIVE")
system.file("R/consortUI.R", package = "DIVE")
system.file("consortUI.R", package = "DIVE")
system.file("DIVE/R/consortUI.R")
system.file("~/DIVE/R/consortUI.R")
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp()
runApp('~/nPOD-Dev/visNetwork/varGraph')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
runApp('~/nPOD-Dev/visNetwork/varGraph')
letters[1"5"]
letters[1:5]
tags$li(1:5)
letters[paste(1:5)]
tags$li(paste(letters[1:5]))
paste(letters[1:5])
paste(letters[1:5], collapse = ",")
tags$li(paste(letters[1:5], collapse = ","))
tags$ul(lapply(letters[1:5], tags$li))
runApp('~/nPOD-Dev/visNetwork/varGraph')
HTML("<strong>You are matching on</strong>")
span(class = "large-name", NULL)
x
x <- 1:5
paste(x, "~", x)
runApp('~/nPOD-Dev/visNetwork/varGraph')
HTML(tags$ul(lapply(x, tags$li)))
x
HTML(tags$ul(lapply(as.character(x), tags$li)))
tags$ul(lapply(as.character(x), tags$li))
devtools::load_all()
devtools::load_all()
devtools::install()
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
dev_mode()
getOption("dev_mode"
)
runApp('~/nPOD/inst/app')
names(list(A = list(A = 1, B= 2)))
setNames(list(NULL), "i1")
runApp('~/nPOD/inst/app')
matrix(1:5)
setNames(data.frame(1:5, 1:5), NULL)
scales::col_numeric("Blues", domain = NULL)(1:5)
setNames(data.frame(1:5, scales::col_numeric("Blues", domain = NULL)(1:5)), NULL)
length(NULL)
devtools::install()
devtools::document()
devtools::install()
runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
range(1:10)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
scales::col_numeric("Dark", domain = NULL)(matrix(1:3))
scales::col_numeric("Set1", domain = NULL)(matrix(1:3))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
cdata$GADA.pos  %>% factor() %>% as.integer() %>% range()
cdata$GADA.pos  %>% factor() %>% as.integer() %>% range(na.rm = T)
scales::col_numeric("Dark", domain = NULL)(cdata$GADA.pos)
x <- cdata$GADA.pos  %>% factor() %>% as.integer()
scales::col_numeric("Dark", domain = NULL)(x)
scales::col_numeric("Dark", domain = NULL)(c(NA, 1, 2))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
scales::col_numeric("Set1", domain = zdomain, na.color = "black")(1:5)
scales::col_numeric("Set1", domain = NULL, na.color = "black")(1:5)
shiny::runApp('~/nPOD/inst/app')
as.character(NA)
paste(factor(c("a", "b"))
)
cdata()[match(c("DIVID", "6162"), ID]
cdata()[match(c("DIVID", "6162"), ID), 1:3]
cdata[match(c("DIVID", "6162"), ID), 1:3]
factor(1:3) %>% addNA()
scales::col_numeric("Set1", domain = NULL, na.color = "black")(c(NA, 1:3))
scales::col_numeric("Set1", domain = c(NA, 1:3), na.color = "black")(1:2)
scales::col_numeric("Set1", domain = c(NA, 1:3), na.color = "black")(c(1:2, NA))
unique(c(NA, 1:3))
scales::col_numeric("Set1", domain = c(1:3), na.color = "black")(c(1:2, NA))
factor(c(NA, 1:5))
as.integer(factor(c(NA, 1:5)))
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
m[1, 3] <- NA
plot_ly(m, type = "heatmap")
plot_ly(z =m, type = "heatmap")
m <- matrix(rnorm(9), nrow = 1, ncol = 3)
m[1, 3] <- NA
m
m <- matrix(rnorm(3), nrow = 3, ncol = 1)
m
m[2, 1] <- NA
m
plot_ly(z =m, type = "heatmap")
plot_ly(y = as.character(x), z =m, type = "heatmap")
plot_ly(y = as.character(z), z =m, type = "heatmap")
plot_ly(y = as.character(m), z =m, type = "heatmap")
y <- as.character(m)
y
y <- letters[1:3]
plot_ly(y = y, z =m, type = "heatmap")
y <- c("a", NA, "b")
plot_ly(y = y, z =m, type = "heatmap")
y <- paste(c("a", NA, "b"))
y
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
paste("x", 1:3)
paste("x", 1:3, collapse = "")
paste(1:3)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
customcols <- setNames(data.frame(x[, 1], c("red", "black", "red")), NULL)
customcols <- setNames(data.frame(m[, 1], c("red", "black", "red")), NULL)
plot_ly(y = y, z =m, type = "heatmap", colorscale = customcols)
plot_ly(y = c(1, NA, 1), z =m, type = "heatmap", connectgaps = F)
z
m
plot_ly(y = m, z =m, type = "heatmap", connectgaps = F)
plot_ly(y = m, z =m, type = "heatmap", connectgaps = T)
plot_ly(y = y, z =m, type = "heatmap")
plot_ly(y = c("a", NA, "b)", z =m, type = "heatmap")
)
plot_ly(y = c("a", NA, "b"), z =m, type = "heatmap")
plot_ly(y = c("a", NA, "b"), z =m, type = "heatmap", connectgaps = F)
plot_ly(y = c("a", NA, "b"), z =m, type = "heatmap", connectgaps = T)
customcols <- setNames(rescale(data.frame(x[, 1]), c("red", "black", "red")), NULL)
customcols <- setNames(scales::rescale(data.frame(x[, 1]), c("red", "black", "red")), NULL)
customcols <- setNames(scales::rescale(data.frame(y[, 1]), c("red", "black", "red")), NULL)
y
customcols <- setNames(scales::rescale(data.frame(m[, 1]), c("red", "black", "red")), NULL)
customcols <- setNames(data.frame(scales::rescale(m[, 1])), c("red", "black", "red")), NULL)
customcols <- setNames(data.frame(scales::rescale(m[, 1]), c("red", "black", "red")), NULL)
plot_ly(y = y, z =m, type = "heatmap", colorscale = customcols)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
scales::rescale(c(1, NA, 5, 6))
scales::rescale(c(1, NA, 2, 2))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
paste("x =", m)
match(1:5, 1:10)
match(1:5, 10:1)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
join(c("6251", "6249", "DIVID"), cdata[ , c(1:5), with = F], by = "ID", all.x = T)
merge(c("6251", "6249", "DIVID"), cdata[ , c(1:5), with = F], by = "ID", all.x = T)
merge(ID = c("6251", "6249", "DIVID"), cdata[ , c(1:5), with = F], by = "ID", all.x = T)
merge(data.table(ID = c("6251", "6249", "DIVID")), cdata[ , c(1:5), with = F], by = "ID", all.x = T)
duplicated(cdata$ID)
merge(data.table(ID = c("6251", "6249", "DIVID")), cdata[ , c(1:5), with = F], by = "ID", all.x = T, sort = F)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
key = "ID"
data.table(key = 1:3)
data.table(get(key) = 1:3)
data.table(eval(key) = 1:3)
data.table(`key`` = 1:3)
data.table(`key` = 1:3)
as.data.table(setNames(1:3, key))
key
as.data.table(setNames(list(1:3), key))
data.table(setNames(list(1:3), key))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
runApp('~/nPOD/inst/app')
6110 %in% cdata$ID
cdata[ID == 6110]
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
data.table(ID = c(1, 1, 2, 2))[unique(ID)]
data.table::data.table(ID = c(1, 1, 2, 2))[unique(ID)]
devtools::install()
data.table::data.table(ID = c(1, 1, 2, 2))[!duplicated(ID), ]
data.table::data.table(ID = c(1, 1, 2, 2))[!duplicated(ID)]
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
c(list(1), list(NULL))
lapply(character(0), mean)
list(list(1), list())
c(list(1), list())
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
rescale(10:20, from = c(10, 30))
scales::rescale(10:20, from = c(10, 30))
scales::rescale(10:20, from = c(0, 30))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
viridis(50)
viridis::viridis(50)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
rainbow(5)
image(rainbow(5))
scales::show_col(rainbow(5))
nlevels(factor(c(letters[1:5], NA)))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
scales::col_numeric("rainbow", domain = c(1, 5), na.color = "gray")(1:3)
scales::col_numeric("rainbow", domain = c(1, 5), na.color = "gray")(c(1:3))
scales::col_numeric("viridis", domain = c(1, 5), na.color = "gray")(c(1:3))
scales::show_col(scales::col_numeric("viridis", domain = c(1, 5), na.color = "gray")(c(1:3)))
scales::show_col(scales::col_numeric("Set1", domain = c(1, 5), na.color = "gray")(c(1:3)))
scales::show_col(scales::col_numeric("plasma", domain = c(1, 5), na.color = "gray")(c(1:3)))
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
1:3 %>% factor() %>% nlevels()
1:3 %>% factor() %>% levels()
factor(1:3)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
df_colors = data.frame(range=c(0:11), colors=c(0:11))
color_s <- setNames(data.frame(df_colors$range, df_colors$colors), NULL)
for (i in 1:12) {
color_s[[2]][[i]] <- interval.cols[[(i + 1) / 2]]
color_s[[1]][[i]] <-  i / 12 - (i %% 2) / 12
}
interval.cols <- brewer.pal(6,"Set2")
interval.cols <- rcolorbrewer::brewer.pal(6,"Set2")
interval.cols <- RColorBrewer::brewer.pal(6,"Set2")
interval.cols
for (i in 1:12) {
color_s[[2]][[i]] <- interval.cols[[(i + 1) / 2]]
color_s[[1]][[i]] <-  i / 12 - (i %% 2) / 12
}
colr_s
color_s
factor(1:4) %>% range()
cat(1:5)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
cat("scaled:", 1:3)
devtools::install()
shiny::runApp('~/nPOD/inst/app')
color_s
zcolors <- rep(scales::col_numeric("plasma", domain = c(1, 5), na.color = "gray")(1:3), each = 2)
zcolors
c(0, rep(scales::rescale(1:3, from = range(1, 5)), each = 2), 1)
c(0, rep(scales::rescale(1:5), each = 2), 1)
rep(scales::rescale(1:5), each = 2)
scales::rescale(1:5)
zcolors <- rep(scales::col_numeric("plasma", domain = c(1, 5), na.color = "gray")(1:5)
zcolors <- scales::col_numeric("plasma", domain = c(1, 5), na.color = "gray")(1:5)
zcolors
zcolors <- rep(scales::col_numeric("plasma", domain = c(1, 5), na.color = "gray")(1:5), each = 2)
zcolors
devtools::install()
shiny::runApp('~/nPOD/inst/app')
zscaled
zscaled <- rep(scales::rescale(1:5), each = 2)
for(i in 2:length(zscaled)-1) zscaled[i] <- (zscaled[i]+zscaled[i+1])/2
zscaled
zscaled <- rep(scales::rescale(1:5), each = 2)
zscaled
zscaled <- rep(scales::rescale(1:10), each = 2)
scaled
zscaled
zscaled <- rep(scales::rescale(1:15), each = 2)
zscaled
zscaled <- rep(scales::rescale(1:12), each = 2)
zscaled
zscaled <- rep(scales::rescale(1:11), each = 2)
zscaled
for(i in 2:length(zscaled)-1) zscaled[i] <- (zscaled[i]+zscaled[i+1])/2
zscaled
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
devtools::install()
levels(factor(letters[1;3]))
levels(factor(letters[1:3]))
shiny::runApp('~/nPOD/inst/app')
factor(letters[1:5], levels = letters)
factor(letters[1:5], levels = letters) %>% as.numeric()
factor(letters[5:10], levels = letters) %>% as.numeric()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
rainbow(5)
plot_ly(z = m, x= 1:3, y = 1:3, type = "heatmap", colors = c("red", "blue", "red"))
factor("x", "w", "y")
levels(factor(c("x", "w", "y")))
levels(factor(c("x", "w", "y")))[c(NA, 1)]
levels(factor(c("x", "w", "y")))[c(5, 1)]
plot_ly(z = m, x= 1:3, y = 1:3, type = "heatmap", colors = c("red", NA, "red"))
shiny::runApp('~/nPOD/inst/app')
plot_ly(z = m, x= 1:3, y = 1:3, type = "heatmap", colors = c("red", NA, NA))
plot_ly(z = m, x= 1:5, y = 1:5, type = "heatmap", colors = c("red", NA, NA, "blue", "green"))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
cat(setNames(1:3, c("a", "b", "c")))
devtools::install()
shiny::runApp('~/nPOD/inst/app')
plot_ly(z = m, x= 1:5, y = 1:5, type = "heatmap", colors = c("#00FF2EFF", "#00FFB9FF", "#00B9FFFF"))
plot_ly(z = m, x= "a", y = c("a", "b", "c"), type = "heatmap", colors = c("#00FF2EFF", "#00FFB9FF", "#00B9FFFF"))
cat(factor(letters[1:3]))
devtools::load_all()
devtools::install()
shiny::runApp('~/nPOD/inst/app')
devtools::install()
shiny::runApp('~/nPOD/inst/app')
