a <- a[[1]]
a
antigen <- gsub(" .+", "", a)
antigen
print(paste0(antigen, "\n"))
cat(paste0(antigen, "\n"))
rrid <- "Cat# 301002; RRID:AB_314120
Cat# 305002; RRID:AB_314486
Cat# 338502; RRID:AB_1279181
Cat# 333802; RRID:AB_1089058
Cat# 336215; RRID:AB_2563745
Cat# 300502; RRID:AB_314070
Cat# 555677; RRID:AB_396030
Cat# 916104; RRID:AB_2616797
Cat# 14-0202-82; RRID:AB_10734340
Cat# 306002; RRID:AB_314576
Cat# 101202; RRID:AB_312785
Cat# 318002; RRID:AB_604112
Cat# 345502; RRID:AB_1953319
Cat# 306502; RRID:AB_314608
Cat# 555359; RRID:AB_395762
Cat# 303202; RRID:AB_314334
Cat# 302002; RRID:AB_314202
Cat# A22331; RRID:AB_10639528
Cat# 311402; RRID:AB_314871
Cat# 307602; RRID:AB_314680
Cat# 301902; RRID:AB_314194
Cat# 300402; RRID:AB_314056
Cat# 304002; RRID:AB_314390
Cat# 14-5273; RRID:AB_11043400
Cat# 302502; RRID:AB_314264
Cat# 342302; RRID:AB_1626265
Cat# 357202; RRID:AB_2561851
Cat# 14-0939-82; RRID:AB_891508
Cat# AF2188; RRID:AB_416562
Cat# 9449BF; RRID:AB_2715512
"
cat <- strsplit(cat, "\n")[[1]]
rrid <- strsplit(rrid, "\n")[[1]]
catalog <- gsub(";.+", "", rrid)
cat(paste0(catalog, "\n"))
cat(gsub("Cat# ", "", paste0(catalog, "\n")))
rrid <- gsub("^.+; ", "", rrid)
rrid
cat(paste0(rrid, "\n"))
antibody
a
conj <- regmatches(regexpr("(?.+)", a), a)
conj <- regmatches(regexpr("(?[.]+)", a), a)
conj <- regmatches(regexpr("([.]+)", a), a)
conj <- regmatches(a, regexpr("([.]+)", a))
conj
conj <- regmatches(a, regexpr("(.+)", a))
conj
conj <- regmatches(a, regexpr("\((.+)\)", a))
conj <- regmatches(a, regexpr("\\((.+)\\)", a))
conj
conj <- gsub("(|)", "", conj)
conj
conj <- gsub("(", "", conj)
conj <- gsub("\\(|\\)", "", conj)
conj
cat(paste0(conj, "\n"))
mygene::query("somatostatin", species = "human", fields = c("symbol", "name", uniprot"))
)
mygene::query("somatostatin", species = "human", fields = c("symbol", "name", "uniprot"))
mygene::query("somatostatin", species = "human", fields = "symbol,name,uniprot")
mygene::query("SST", species = "human", fields = "symbol,name,uniprot")
mygene::query("MafA", species = "human", fields = "symbol,name,uniprot")
mygene::query("phospho-Histone H3 (Ser10) Mitosis Marker", species = "human", fields = "symbol,name,uniprot")
mygene::query("phospho-Histone H3 (Ser10)", species = "human", fields = "symbol,name,uniprot")
mygene::query("phospho-Histone H3", species = "human", fields = "symbol,name,uniprot")
mygene::query("CD31", species = "human", fields = "symbol,name,uniprot")
library(diagrammeR)
install.packages("diagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
DiagrammeR::grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10, rankdir = LR]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
A [label = 'Methods text']
# 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
A [label = 'Methods text']
# 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
{S1, S2}->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
{S1 S2}->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
S1->M1 S2->M1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = ']
# 'edge' statements
S1->M1 S2->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get data for Antibody Registry']
# 'edge' statements
S1->M1 S2->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get data for Antibody Registry']
# 'edge' statements
{S1 S2}->M1 M1->M3
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Programmatically parse']
M2 [label = 'Get common data from AbRegistry']
M3 [label = 'Populate properties programmatically']
M4 [label = 'Check and fill in properties manually']
E1 [label = 'To JSON']
E2 [label = 'Validate JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1 E1->E2
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Get data from AbRegistry']
M3 [label = 'Populate properties programmatically']
M4 [label = 'Check and fill in properties manually']
E1 [label = 'To JSON']
E2 [label = 'Validate JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1 E1->E2
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Get data from AbRegistry']
M3 [label = 'Populate properties']
M4 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M3 [label = 'Populate properties with DB sources and API']
M4 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->M4 M4->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check/fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
S2 [label = 'Methods table']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1 S2}->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1; S2; M1; M2;
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Technology_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text']
M3 [label = 'Check and fill in properties manually']
M4 [label = 'Register technology if appropriate']
M5 [label = 'Update record with RRID']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->M4 M4->M5 M5->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods/Supplemental text']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
node [shape = circle,
fontname = Helvetica]
S1
S1 [label = 'Methods/Supplemental text']
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Antibody_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods/Supplemental text', shape = oval]
M1 [label = 'Parse']
M2 [label = 'Populate properties with DB sources and API']
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
S1->M1 M1->M2 M2->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Dataset_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Methods text', shape = oval]
M3 [label = 'Check and fill in properties manually']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->E1
}
")
DiagrammeR::grViz("
digraph Technology_workflow {
graph [overlap = true, fontsize = 10, rankdir = LR]
# 'node' statements
node [shape = box,
fontname = Helvetica]
S1 [label = 'Abstract/Discussion/full text', shape = oval]
M3 [label = 'Check and fill in properties manually']
M4 [label = 'Register technology if appropriate']
M5 [label = 'Update record with RRID']
E1 [label = 'Export JSON']
# 'edge' statements
{S1}->M3 M3->M4 M4->M5 M5->E1
}
")
shiny::runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
sample(c("Yes", "No"), size = 94, replace = T)
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
install.packages("sourcetools")
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
runApp('HIRN/concept')
devtools::load_all()
setwd("~/DIVE")
devtools::load_all()
roxygen2::document()
devtools::document()
setwd("~/DIVE/inst/cdata")
head(metadata)
metadata <- fread("metadata.tsv")
names(metadata)
usethis::use.data(metadata)
usethis::use_data(metadata)
usethis::use_data(metadata, overwrite = T)
metadata <- fread("metadata.tsv")
metadata <- fread("metadata.tsv")
metadata <- fread("metadata.tsv", fill = T)
head(metadata)
usethis::use_data(metadata, overwrite = T)
devtools::load_all()
browseR()
install.packages("DT")
devtools::load_all()
browseR()
devtools::load_all()
browseR()
