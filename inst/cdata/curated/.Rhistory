if(!is.null(nodemods)) {
for(a in names(nodemods)) network <- igraph::set_vertex_attr(graph = network, name = a, value = nodemods[[a]])
}
return(network)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full")
getwd()
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = 10), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- viridis::magma(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full")
viridis::magma(9)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = 10), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- viridis::magma(ncolorscale)[value]
return(color)
}
viridis::magma(9)
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full")
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = 10), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- col2rgb(viridis::magma(ncolorscale)[value])
return(color)
}
test <- makeNetworkGraph()
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- viridis::magma(ncolorscale)[value]
return(color)
}
test <- makeNetworkGraph()
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- col2rgb(viridis::magma(ncolorscale)[value])
return(color)
}
test <- makeNetworkGraph()
col2rgb("#000004FF")
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full")
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full")
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::viridis(ncolorscale-1)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 88) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::plasma(ncolorscale-1)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 88) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 88) %>% visEdges(opacity = 0.7) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 88) %>% visEdges(alpha = 0.7) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 88) %>% visEdges(color = list(opacity = 0.7)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 88) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 90) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 17) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata, mfuns = list(vSize, vBinColor), mcols = c(size = "Dimensions", color = "InApp"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges, background = "black")
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata, mfuns = list(vSize, vBinColor), mcols = c(size = "Dimensions", color = "InApp"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges, background = "gray50")
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata, mfuns = list(vSize, vBinColor), mcols = c(size = "Dimensions", color = "InApp"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges, background = "dimgray")
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata, mfuns = list(vSize, vBinColor), mcols = c(size = "Dimensions", color = "InApp"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges, background = "rgb(32,32,32)")
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata, mfuns = list(vSize, vBinColor), mcols = c(size = "Dimensions", color = "InApp"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges, background = "LightGray")
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::plasma(ncolorscale-1, end = 0.5)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata, mfuns = list(vSize, vBinColor), mcols = c(size = "Dimensions", color = "InApp"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, end = 0.6)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::viridis(ncolorscale-1, end = 0.7)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::viridis(ncolorscale-1, end = 0.8)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, end = 0.7)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, start = 0.2, end = 0.7)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, begin = 0.2, end = 0.7)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, begin = 0.1, end = 0.7)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, begin = 0.1, end = 0.8)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "dimgray", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
# color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
color <- substr(viridis::magma(ncolorscale-1, begin = 0.1, end = 0.6)[value], 1, 7)
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 9.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
studynetwork <- test
usethis::use.data(studynetwork)
usethis::use_data(studynetwork)
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "black", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#E1341E", colorF = "black", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#2196f3", colorF = "black", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#EF105F", colorF = "black", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#EF105F", colorF = "#5E007B", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#FF0025", colorF = "#5E007B", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#FF0025", colorF = "gray20", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "mediumspringgreen", colorF = "gray20", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
vBinColor <- function(x, colorT = "#2196f3", colorF = "gray20", ncolorscale = 10) {
x <- sum(as.integer(as.logical(x)), na.rm = T)/length(x)
value <- cut(x, breaks = seq(0, 1, len = ncolorscale), include.lowest = T, right = F, label = F)
color <- colorRampPalette(c(colorF, colorT))(ncolorscale-1)[value]
return(color)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata,
mfuns = list(vSize, vBinColor, data.table::first), mcols = c(size = "Dimensions", color = "InApp", label = "Contributor"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
names(metadata)
test$x$nodes
head(metadata)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata,
mfuns = list(vSize, vBinColor, data.table::first), mcols = c(size = "Dimensions", color = "InApp", lab = "Contributor"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
test <- makeNetworkGraph()
test$x$nodes
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata,
mfuns = list(vSize, vBinColor, data.table::first), mcols = c(size = "Dimensions", color = "InApp", lab = "Contributor"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
visN <- visNetwork::toVisNetworkData(network)
visN$nodes$label <- visN$nodes$lab # label isn't transferred properly automatically
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
test <- makeNetworkGraph()
test %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
studynetwork <- test
usethis::use_data(studynetwork, overwrite = T)
devtools::load_all()
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
browseR()
browseR()
devtools::load_all()
browseR()
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
network <- graph_from_adjacency_matrix(adjm)
eigenc <- eigen_centrality(network)
head(eigenc)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata,
mfuns = list(vSize, vBinColor, data.table::first), mcols = c(size = "Dimensions", color = "InApp", lab = "Contributor"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
eigenc <- igraph::eigen_centrality(network)
visN <- visNetwork::toVisNetworkData(network)
visN$nodes$label <- visN$nodes$lab # label isn't transferred properly automatically
visN$nodes$title <- paste0(visN$nodes$label, "<br>Eigenvector centrality score: ", eigenc)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
studynetwork <- makeNetworkGraph()
studynetwork %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata,
mfuns = list(vSize, vBinColor, data.table::first), mcols = c(size = "Dimensions", color = "InApp", lab = "Contributor"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
eigenc <- igraph::eigen_centrality(network)
visN <- visNetwork::toVisNetworkData(network)
visN$nodes$label <- visN$nodes$lab # label isn't transferred properly automatically
visN$nodes$title <- paste0("<strong>", visN$nodes$label, "</strong><br>Eigenvector centrality score: ", eigenc$vector)
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
studynetwork <- makeNetworkGraph()
studynetwork %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
makeNetworkGraph <- function(randomSeed = NULL) {
adjm <- connectByCases(namepattern = "([^_]*)")
nodes <- rownames(adjm)
nodemods <- nodeMod(nodes = nodes, metadata = metadata,
mfuns = list(vSize, vBinColor, data.table::first), mcols = c(size = "Dimensions", color = "InApp", lab = "Contributor"))
network <- networkGraph(adjm = adjm, nodemods = nodemods)
eigenc <- igraph::eigen_centrality(network)
visN <- visNetwork::toVisNetworkData(network)
visN$nodes$label <- visN$nodes$lab # label isn't transferred properly automatically
visN$nodes$title <- paste0("<strong>", visN$nodes$label, "</strong><br>Eigenvector centrality score: ", round(eigenc$vector, 3))
visN$edges$width <- visN$edges$weight # since weight aes is stored in width for visNetwork
visN <- visNetwork::visNetwork(visN$nodes, visN$edges)
return(visN)
}
studynetwork <- makeNetworkGraph()
studynetwork %>% visIgraphLayout(type = "full", randomSeed = 21) %>% visNodes(color = list(opacity = 0.7)) %>% visEdges(color = list(opacity = 0.5)) %>% visOptions(highlightNearest = TRUE)
usethis::use_data(studynetwork, overwrite = T)
devtools::load_all()
runApp('~/DIVE/inst/app')
devtools::load_all()
runApp('~/DIVE/inst/app')
devtools::load_all()
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
devtools::load_all()
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
devtools::load_all()
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
runApp('~/DIVE/inst/app')
detach(visNetwork())
detach(visNetwork)
detach("visNetwork")
detach(package:visNetwork)
runApp('~/DIVE/inst/app')
