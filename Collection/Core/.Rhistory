names(results) <- gses
ok <- allOK(results)
table(ok)
cat("GSEs that failed:", names(results)[!ok])
results <- results[ok] # Go back to failures later, proceed with OK
# Experiment Type (1-Channel or 2-Channel; more specific assignments, i.e. whether there was dye swap, happens in human review)
inferXPType <- function(DT) {
default <- "1C"
ch2 <- grep("source_name_ch2", names(DT))
if(length(ch2)) return("2C")
return(default)
}
ixpType <- sapply(results, inferXPType)
# BSM -- Molecule -- note: perhaps have a list of all known tlr ligands to match against
inferBSM <- function(DT) {
x1 <- rep("", nrow(DT))
bsmcol <- grep("agent|stimulation", names(DT))
if(length(bsmcol) == 1) {
info <- DT[bsmcol]
return(info)
}
return(x1)
}
iBSM <- sapply(results, inferBSM)
# BSMDCD -- Time
inferDCD <- function(DT) {
x1 <- rep("", nrow(DT))
# First find a column that specifically contains treatment info
tcol <- grep("^treatment|time", names(DT))
if(length(tcol)) {
info <- do.call(paste, DT[tcol])
} else { # Use information in sample title
info <- DT$title
}
m <- regexpr("[0-9]+ ?(d|h|D|H)|(D|d)(ay) ?[0-9]+", info)
x1[m != -1] <- regmatches(info, m)
# Sometimes time is stated as "overnight", which usually means "12 h"
x1[grepl("overnight", info)] <- "12h"
x1 <- tolower(gsub(" ", "", x1))
return(x1)
}
iDCD <- sapply(results, inferDCD)
# BSMDCD2 -- Dose/concentration
inferDCD2 <- function(DT) {
x1 <- rep("", nrow(DT))
dosecol <- grep("dose|concentration|amount|treatment", names(DT))
if(length(dosecol)) {
info <- do.call(paste, DT[dosecol])
m <- regexpr("[0-9.]+ ?(u|n|m)(g|M)?\\/?([A-Za-z]{2})", info)
x1[m != -1] <- regmatches(info, m)
}
return(x1)
}
iDCD2 <- sapply(results, inferDCD2)
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
inferBiosamp <- function(DT) {
# First find the obvious columns containing cell line/type
cellcol <- grep("^cell.*ch1", colnames(DT))
if(length(cellcol)) {
cell <- do.call(paste, DT[cellcol])
return(cell)
} else {
tissuecol <- grep("^tissue.*ch1", colnames(DT))
if(length(tissuecol)) {
tissue <- do.call(paste, DT[tissuecol])
return(tissue)
} else { # Use the source_name_ch1,treatment_protocol_ch1 columns otherwise
bs <- lapply(biosamps, function(b) grepl(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
names(bs) <- biosamps
bs <- bs[sapply(bs, sum) >= 1 ]
if(!length(bs)) return(rep("?", nrow(DT)))
bs <- bs[order(sapply(bs, sum), decreasing = T)]
nterm <- ifelse(length(bs) > 1, 2, 1)
x1 <- lapply(1:nterm, function(i) ifelse(bs[[i]], names(bs)[[i]], ""))
x1 <- do.call("paste", x1)
x1 <- trimws(x1)
return(x1)
}
}
}
iBiosamp <- sapply(results, inferBiosamp)
# Control?
inferCTRL <- function(DT) {
s <- DT$title
ctrl <- as.numeric(grepl("wt|wildtype|control|ctrl|healthy|media|medium|veh|unstim|untreated|mock", s, ignore.case = T))
}
iCTRL <- sapply(results, inferCTRL)
subP <- function(data) {
cols <- grep("title|geo_accession|source_name|description|platform|characteristics|treatment", names(data))
data <- data[, cols]
data <- lapply(data, function(x) gsub("\n", " ", x))
as.data.table(data)
}
export <- lapply(results, subP)
export <- rbindlist(export, fill = T)
export[, GSE := unlist(mapply(rep, gses, sapply(results, nrow)))]
newcols1 <- c("xpType", "RefDye", "Comment", "Group", "Batch", "Node", "NodeFunction", "BSM", "BSMDCD", "BSMDCD2", "BioSampName")
export[, (newcols1) := ""]
export[, c("Ignore") := 0]
export[, c("XP") := 1]
export[, xpType := ixpType]
export[, isCTRL := iCTRL]
export[, BioSampName := iBiosamp]
export[, BSMDCD := iDCD]
export[, BSMDCD2 := iDCD2]
neworder <- c("GSE", newcols1[1:4], "Ignore", "XP", "isCTRL", newcols1[5:11],
"title", "geo_accession", grep("^source|treatment", names(export), val = T),
grep("^char", names(export), val = T), "platform_id", grep("^desc", names(export), val = T))
setcolorder(export, neworder)
head(export)
write.table(export, REVIEW1, sep = "\t", row.names = F, quote = F)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/makeContrasts.R")
REVIEW2 <- "sample_review2.txt"
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt"
dt <- makeGroupLabels(REVIEWTAB)
dt <- makeGroupLabels(REVIEW2)
unique(dt[, .(GSE, Group, Node, NodeFunction, BSM, BSMDCD, BioSampName)]) # check
contrasts <- makeContrasts(dt)
contrasts[]
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/makeContrasts.R")
# Input:
REVIEW2 <- "sample_review2.txt"
# Output files:
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt"
write.table(dt, REVIEW3, sep = "\t", row.names = F, quote = F)
write.table(contrasts, CONTRASTS, sep = "\t", row.names = F, quote = F)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/fitter.R")
datadir <- "GEOtemp/"
resultsdir <- "Results/"
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt"
DT <- fread(REVIEW3)
DT <- DT[GSE != "", 1:17]
setkey(DT, GSE)
contrasts <- fread(CONTRASTS, colClasses = c("RefDye" = "character", "Comment" = "character", "Group" = "character", "Batch" = "character",
"Node" = "character", "NodeFunction" = "character"))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
source("Code/misc.R")
source("Code/fitter.R")
datadir <- "GEOtemp/"
resultsdir <- "Results/"
REVIEW3 <- "sample_review3.txt"
CONTRASTS <- "sample_contrasts.txt.csv"
DT <- fread(REVIEW3)
DT <- DT[GSE != "", 1:17]
setkey(DT, GSE)
contrasts <- fread(CONTRASTS, colClasses = c("RefDye" = "character", "Comment" = "character", "Group" = "character", "Batch" = "character",
"Node" = "character", "NodeFunction" = "character"))
shiny::runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colors = pal, legendgroup = ~Label, showlegend = FALSE)
scale_color_viridis(px2$nlogP.AABvsHC)
library(viridis)
scale_color_viridis(px2$nlogP.AABvsHC)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colors = "viridis", legendgroup = ~Label, showlegend = FALSE)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colorscale = "viridis", legendgroup = ~Label, showlegend = FALSE)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, colorscale = "magma", legendgroup = ~Label, showlegend = FALSE)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, legendgroup = ~Label, showlegend = FALSE)
colorscale <- magma(px2$nlogP.AABvsHC)
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, legendgroup = ~Label, colors = colorscale, showlegend = FALSE)
magma(3)
colorscale <- scale_color_viridis(px2$nlogP.AABvsHC)
head(colorscale)
colorscale
plot_ly(data = px2, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Protein, type="scatter", mode = "markers",
color = ~nlogP.T1DvsHC, legendgroup = ~Label, colors = colorscale, showlegend = FALSE)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
FALSE + 1
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
.a <- test
.a < ""
.a
a. <- ""
rm(a.)
.a <- "list"
.a
rm(.a)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
head(gx$Gene)
shiny::runApp('nPOD/nPOD-App/DIVE')
setwd("~/nPOD/nPOD-App/DIVE/Collection/Core")
library(data.table)
hla <- fread("phased_ref.tsv")
head(hla)
hla <- fread("HiResHLAclean_ref.tsv")
head(hla)
aab <- fread("AutoAb_ref.tsv")
head(aab)
dem <- fread("Demographics_ref.tsv")
head(dem)
n <- merge(hla, aab[, .(ID, AutoAb.count)], by = "ID")
head(n)
head(hla)
hla <- fread("phased_ref.tsv")
head(hla)
n <- merge(hla, aab[, .(ID, AutoAb.count)], by = "ID")
head(dem)
n <- merge(n, dem[, .(ID, donor.type)], by = "ID")
head(n)
n <- merge(hla[, .(ID, DRB1.1, DQB1.1, DRB1.2, DQB1.2, DQA1.1, DQA1.2)], aab[, .(ID, AutoAb.count)], by = "ID")
n <- merge(n, dem[, .(ID, donor.type)], by = "ID")
head(n)
unique(n$donor.type)
n <- n[donor.type %in% c("No diabetes", "Autoab Pos") & (AutoAb.count == 0 | AutoAb.count == 1) ]
n
tail(n)
print(n, 106)
all <- merge(hla[, .(ID, DRB1.1, DQB1.1, DRB1.2, DQB1.2, DQA1.1, DQA1.2)], aab[, .(ID, AutoAb.count)], by = "ID")
all <- merge(all, dem[, .(ID, donor.type)], by = "ID")
n <- all[donor.type %in% c("No diabetes", "Autoab Pos") & (AutoAb.count == 0 | AutoAb.count == 1) ]
n
head(all)
all[donor.type == "Autoab Pos", table(AutoAb.count)]
all[donor.type == "Autoab Pos", Count = length(AutoAb.count), by = "AutoAb.count"]
all[donor.type == "Autoab Pos", .(Count = length(AutoAb.count)), by = "AutoAb.count"]
all[, table(AutoAb.count), by = "donor.type")]
all[, table(AutoAb.count), by = "donor.type"]
all[, table(donor.type), by = "AutoAb.count"]
all[, .(donor.type = unique(donor.type), Count = table(donor.type)), by = "AutoAb.count"]
all[donor.type = "Autoab Pios", table(AutoAb.count)]
all[donor.type = "Autoab Pos", table(AutoAb.count)]
all[donor.type = "AutoAb Pos", table(AutoAb.count)]
all[donor.type == "AutoAb Pos", table(AutoAb.count)]
all[donor.type == "Autoab Pos", table(AutoAb.count)]
all[donor.type == "Autoab Pos", AutoAb.count]
n <- all[donor.type %in% c("No diabetes", "Autoab Pos", "T1D") & (AutoAb.count == 0 | AutoAb.count == 1) ]
n
DR3 <- list(DRB1 = "03:01", DQA1 = "05:01", DQB1 = "02:01")
hasHaplotype <- function(risk.alleles, data) {
Reduce(`&`, Map(grepl, risk.alleles, data))
}
n[, hasHaplotype(DR3, .(DRB1.1, DQA1.1, DQB1.1))]
n[, ch1 := ifelse(hasHaplotype(DR3, .(DRB1.1, DQA1.1, DQB1.1)), "DR3", "X")]
n
print(n, 157)
# Check for DR4 on first chromosome if is "X" (not DR3)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(DR4, .(DRB1.1, DQA1.1, DQB1.1)), "DR4", "X")]
DR4 <- list(DRB1 = "04:", DQA1 = "03:01", DQB1 = "03:02")
# Check for DR4 on first chromosome if is "X" (not DR3)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(DR4, .(DRB1.1, DQA1.1, DQB1.1)), "DR4", "X")]
n
n[, ch2 := ifelse(hasHaplotype(DR3, .(DRB1.2, DQA1.2, DQB1.2)), "DR3", "X")]
# Check for DR4 on other chromosome if is "X"
n[ch2 == "X", ch2 := ifelse(hasHaplotype(DR4, .(DRB1.2, DQA1.2, DQB1.2)), "DR4", "X")]
n
protective <- list(DRB1 = "15:01", DQA1 = "01:02", DQB1 = "06:02")
# Check for protective if is "X" (neither DR3 nor DR4)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(protective, .(DRB1.1, DQA1.1, DQB1.1)), "P", "X")]
n
# Check for DR3 on first chromosome
n[, ch1 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.1]
x.1 <- c("DRB1.1", "DQA1.1", "DQB1.1")
# Check for DR3 on first chromosome
n[, ch1 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.1]
n
n[ch1 == "X", ch1 := ifelse(hasHaplotype(DR4, .SD), "DR4", "X"), .SDcols = x.1]
# Check for protective if is "X" (neither DR3 nor DR4)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(protective, .SD), "P", "X"), .SDcols = x.1]
n
x.2 <- c("DRB1.2", "DQA1.2", "DQB1.2")
# Check for DR3 on other chromosome
n[, ch2 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.2]
# Check for DR4 on other chromosome if is "X"
n[ch2 == "X", ch2 := ifelse(hasHaplotype(DR4, .SD), "DR4", "X"), .SDcols = x.2]
n[ch2 == "X", ch1 := ifelse(hasHaplotype(protective, .SD), "P", "X"), .SDcols = x.2]
n
n[, ch1 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.1]
# Check for DR4 on first chromosome if is "X" (not DR3)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(DR4, .SD), "DR4", "X"), .SDcols = x.1]
# Check for protective if is "X" (neither DR3 nor DR4)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(protective, .SD), "P", "X"), .SDcols = x.1]
n
x.2 <- c("DRB1.2", "DQA1.2", "DQB1.2")
# Check for DR3 on other chromosome
n[, ch2 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.2]
# Check for DR4 on other chromosome if is "X"
n[ch2 == "X", ch2 := ifelse(hasHaplotype(DR4, .SD), "DR4", "X"), .SDcols = x.2]
n[ch2 == "X", ch1 := ifelse(hasHaplotype(protective, .SD), "P", "X"), .SDcols = x.2]
n
x.1 <- c("DRB1.1", "DQA1.1", "DQB1.1")
# Check for DR3 on first chromosome
n[, ch1 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.1]
# Check for DR4 on first chromosome if is "X" (not DR3)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(DR4, .SD), "DR4", "X"), .SDcols = x.1]
# Check for protective if is "X" (neither DR3 nor DR4)
n[ch1 == "X", ch1 := ifelse(hasHaplotype(protective, .SD), "P", "X"), .SDcols = x.1]
x.2 <- c("DRB1.2", "DQA1.2", "DQB1.2")
# Check for DR3 on other chromosome
n[, ch2 := ifelse(hasHaplotype(DR3, .SD), "DR3", "X"), .SDcols = x.2]
# Check for DR4 on other chromosome if is "X"
n[ch2 == "X", ch2 := ifelse(hasHaplotype(DR4, .SD), "DR4", "X"), .SDcols = x.2]
n[ch2 == "X", ch2 := ifelse(hasHaplotype(protective, .SD), "P", "X"), .SDcols = x.2]
n
# HLA risk bin
n[, HLAbin := paste0(ch1, ch2, sep = "/")]
n
# HLA risk bin
n[, HLAbin := paste0(ch1, "/", ch2)]
n
unique(n$HLAbin)
setorder(n, c("ID", x.1, x.2, "AutoAb.count", "donor.type", "ch1", "ch2", "HLAbin")
)
setorder(n, cols = c("ID", x.1, x.2, "AutoAb.count", "donor.type", "ch1", "ch2", "HLAbin"))
setcolorder(n, c("ID", x.1, x.2, "AutoAb.count", "donor.type", "ch1", "ch2", "HLAbin"))
n
library(plyr)
mapBins <- function(x) {
x <- plyr::mapvalues(from = c("DR3/X", "X/DR3", "DR3/DR3"), to = "DR3")
x <- plyr::mapvalues(from = c("DR4/X", "X/DR4", "DR4/DR4"), to = "DR4")
x <- plyr::mapvalues(from = c("P/X", "X/P", "P/P"), to = "P")
x <- plyr::mapvalues(from = "X/X", to = "X")
x
}
n[, HLAbin.new := mapBins(HLAbin)]
asLevels <- function(x) {
x <- factor(x)
levels(x)[levels(x) == c("DR3/X", "X/DR3", "DR3/DR3")] <- "DR3"
levels(x)[levels(x) == c("DR4/X", "X/DR4", "DR4/DR4")] <- "DR4"
levels(x)[levels(x) == c("P/X", "X/P", "P/P")] <- "P"
levels(x)[levels(x) == "X/X"] <- "X"
x
}
n[, HLAlevels := asLevels(HLAbin)]
asLevels <- function(x) {
x <- factor(x)
levels(x)[levels(x) %in% c("DR3/X", "X/DR3", "DR3/DR3")] <- "DR3"
levels(x)[levels(x) %in% c("DR4/X", "X/DR4", "DR4/DR4")] <- "DR4"
levels(x)[levels(x) %in% c("P/X", "X/P", "P/P")] <- "P"
x
}
n[, HLAlevels := asLevels(HLAbin)]
n
print(n, 157)
getwd()
setwd("~/nPOD")
unique(n$HLAlevels)
getwd()
write.table(n, "hla_pancreasweights_dataset.txt", sep = "\t", row.names = "F", quotes = "F")
write.table(n, "hla_pancreasweights_dataset.txt", sep = "\t", row.names = F, quotes = F)
write.table(n, "hla_pancreasweights_dataset.txt", sep = "\t", row.names = F, quote = F)
list.files()
list.files()
panw <- fread("Pancreas Weights_2018-11-01_14-37.tsv")
head(panw)
panw <- panw[, c(1, 3, 4)]
setnames(panw, c("ID", "IntactPancreas", "WholePancreasWeight"))
n <- merge(n, panw, by = "ID", all.x = TRUE)
panc[, ID := as.integer(ID)]
pancw[, ID := as.integer(ID)]
panw[, ID := as.integer(ID)]
n <- merge(n, panw, by = "ID", all.x = TRUE)
n
head(dem)
n <- merge(n, dem[, .(ID, age, sex)], by = "ID", all.x = TRUE)
n
n2 <- copy(n)
n2 <-  n2[!is.na(WholePancreasWeight) & IntactPancreas == "TRUE"]
n2
n2 <- n2[!HLAlevels %iN% c("DR3/P", "DR4/P")]
n2 <- n2[!HLAlevels %in% c("DR3/P", "DR4/P")]
levels(n2$HLAlevels)
unique(n2$HLAlevels)
n2[, table(HLAlevels), by = "donor.type"]
n2[, .(Level = names(table(HLAlevels)), Count = table(HLAlevels)), by = "donor.type"]
n2[, .(Count = table(HLAlevels)), by = "donor.type"]
n2[, .(unique(HLAlevels), table(HLAlevels)), by = "donor.type"]
n2[, length(HLAlevels), by = c("donor.type", "HLAlevels")]
n2[, .(table(HLAlevels)), by = "donor.type"]
n2[, table(HLAlevels), by = "donor.type"]
HLAlevels
n2[, .(unique(HLAlevels), table(HLAlevels)), by = "donor.type"]
n2[, list(unique(HLAlevels), table(HLAlevels)), by = "donor.type"]
n2[, unique(HLAlevels), by = "donor.type"]
n2[, HLAlevels := factor(HLAlevels)]
n2[, .(Level = unique(HLAlevels), Count = table(HLAlevels)), by = "donor.type"]
n2[, Count = table(HLAlevels), by = "donor.type"]
n2[, table(HLAlevels), by = "donor.type"]
n2[, table(HLAlevels), by = c("donor.type", "HLAlevels")]
n2[, table(HLAlevels), by = c("donor.type")]
tableHLA <- function(x) {
x <- table(x)
list(names(x), x)
}
n2[, tableHLA(HLAlevels), by = c("donor.type")]
n2[, length(HLAlevels), by = c("donor.type", "HLAlevels")]
n2
n2[age > 17, table(HLAlevels), by = "donor.type"]
levels(n2$HLAlevels)
n2[age > 17, .(hla = unique(HLAlevels), count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(hla = unique(HLAlevels)), by = "donor.type"]
n2[age > 17, .(hla = levels(HLAlevels), count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(hla = names(table(HLAlevels)), count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(hla = names(table(HLAlevels))), by = "donor.type"]
n2[age > 17, list(hla = names(table(HLAlevels)), count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(hla = names(table(HLAlevels)), count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(hla = names(table(HLAlevels)), count = table(HLAlevels)), by = "donor.type"]
All items in j=list(...) should be atomic vectors or lists.
n2[age > 17, .(hla = names(table(HLAlevels)), count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(HLA = names(table(HLAlevels)), Count = table(HLAlevels)), by = donor.type]
cbind(n2[age > 17, HLA = names(table(HLAlevels)), by = "donor.type"],
n2[age > 17, Count = table(HLAlevels), by = "donor.type"])
cbind(n2[age > 17, .(HLA = names(table(HLAlevels))), by = "donor.type"],
n2[age > 17, .(Count = table(HLAlevels)), by = "donor.type"])
n2[age > 17, .(HLA = names(table(HLAlevels))), by = "donor.type"]
n2[age > 17, .(Count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, .(Count = table(HLAlevels)), by = "donor.type"]
n2[age > 17, table(HLAlevels), by = "donor.type"]
n2[age > 17, Count = table(HLAlevels), by = "donor.type"]
n2[age > 17, count = table(HLAlevels), by = "donor.type"]
n2[age > 17, .(count = table(HLAlevels)), by = "donor.type"]
cbind(n2[age > 17, .(HLA = names(table(HLAlevels))), by = "donor.type"],
n2[age > 17, table(HLAlevels), by = "donor.type"])
n2[age > 17, .(names(table(HLAlevels)), table(HLAlevels)), by = "donor.type"]
n2[age > 17, .N, by = c("donor.type", "HLAlevels")]
n2[age > 17, .N, by = c("donor.type", "HLAlevels")][order(donor.type)]
n2[donor.type == "T1D" & HLAlevels == "P"]
n2[age >= 18, .N, by = c("donor.type", "HLAlevels")][order(donor.type)]
n2[age < 17, .N, by = c("donor.type", "HLAlevels")][order(donor.type)]
getwd()
n2[age < 18, .N, by = c("donor.type", "HLAlevels")][order(donor.type)]
n2[age < 18]
write.table(n2, "hla_pw_dataset2.txt", sep = "\t", row.names = F, quote = F)
head(dem)
n <- merge(n, dem[, .(ID, BMI)], by = "ID", all.x = TRUE)
head(n)
head(hla)
n <- merge(n, hla[, .(ID, ethnic.grp)], by = "ID", all.x = TRUE)
head(n)
table(is.na(n$BMI))
n2 <- copy(n)
n2 <- n2[!is.na(BMI) & !is.na(WholePancreasWeight) & IntactPancreas == "TRUE"]
n2 <- n2[!HLAlevels %in% c("DR3/P", "DR4/P")]
n2[, HLAlevels := factor(HLAlevels)]
n2
print(n2, 131)
n2[is.na(ethnic.grp)]
setwd("~/nPOD/nPOD-App/DIVE/Collection/Core")
dinfo <- fread("DiabtesInfo_ref.tsv")
dinfo <- fread("DiabetesInfo_ref.tsv")
head(dinfo)
head(dem)
head(n)
n <- merge(n, dem[, .(ID, race)], by = "ID", all.x = TRUE)
n[, ethnic.grp := NULL]
n2 <- copy(n)
n2 <- n2[!is.na(BMI) & !is.na(WholePancreasWeight) & IntactPancreas == "TRUE"]
n2 <- n2[!HLAlevels %in% c("DR3/P", "DR4/P")]
n2[, HLAlevels := factor(HLAlevels)]
n2[age >= 18, .N, by = c("donor.type", "HLAlevels")][order(donor.type)]
n2[age < 18, .N, by = c("donor.type", "HLAlevels")][order(donor.type)]
n2[is.na(race)]
n2
write.table(n2, "hla_pw_dataset2.txt", sep = "\t", row.names = F, quote = F)
setwd("~/nPOD")
write.table(n2, "hla_pw_dataset2.txt", sep = "\t", row.names = F, quote = F)
library(data.table)
hla_pw <- fread("hla_pw_dataset.txt")
setwd("~/Documents")
hla_pw <- fread("hla_pw_dataset.txt")
hla_pw <- fread("hla_pw_dataset2.txt")
head(hla_pw)
setwd("~/nPOD/nPOD-App/DIVE/Collection/Core")
dem <- fread("Demographics_ref.tsv")
hla_pw <- merge(hla_pw, dem[, .(ID, weight)], by = "ID")
head(hla_pw)
write.table(hla_pw, file = "hlw_pw.tsv", sep = "\t")
write.table(hla_pw, file = "hlw_pw.tsv", sep = "\t", row.names = F)
write.table(hla_pw, file = "hlw_pw_bw.tsv", sep = "\t", row.names = F)
write.table(hla_pw, file = "hla_pw_bw.tsv", sep = "\t", row.names = F)
