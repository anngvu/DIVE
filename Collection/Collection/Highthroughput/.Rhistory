list(source = "https://images.plot.ly/language-icons/api-home/python-logo.png",
xref = "paper",
yref = "paper",
x= 0,
y= 1,
sizex = 1,
sizey = 1,
sizing = "stretch",
layer = "below"
)))
pal <- c("#A69EB0FF", "#1E90FFFF", "#FF00A9FF", "#00FF83FF", "#FFD600FF", "blueviolet")
plot_ly(data = prot, x = ~Diff.T1DvsND, y = ~nlogP.T1DvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "deeppink", "#FF00A9FF", "#00FF83FF", "#FFD600FF", "darkorchid")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#1E90FFFF", "#FF00A9FF", "#00FF83FF", "#FFD600FF", "darkorchid")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#1E90FFFF", "deeppink", "#00FF83FF", "#FFD600FF", "darkorchid")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#1E90FFFF", "deeppink", "#00FF83FF", "#FFD600FF", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#1E90FFFF", "violetred1", "#00FF83FF", "#FFD600FF", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#1E90FFFF", "violetred1", "#00FF83FF", "yellow", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#1E90FFFF", "violetred1", "#00FF83FF", "yellow2", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "mediumaquamarine", "violetred1", "#00FF83FF", "yellow2", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "royalblue1", "violetred1", "#00FF83FF", "yellow2", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = prot, x = ~Diff.T1DvsND, y = ~nlogP.T1DvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "mediumturquoise", "violetred1", "#00FF83FF", "plum1", "darkorchid1")
plot_ly(data = prot, x = ~Diff.AABvsND, y = ~nlogP.AABvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Group),
colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
library(GEOquery)
gse <- "GSE72492"
gse <- getGEO(gse) ## No bioconductor package is available, so use the GPL
eset <- gse[[1]]
meta <- pData(eset)
ids <- as.numeric(meta$`npod id:ch1`)
group <- unlist(mapply(rep, c("HC", "Aab", "T1D"), c(7,6,10)))
probes <- row.names(eset)
gpl <- getGEO(annotation(eset))
# GPL files can vary somewhat, so check column names:
# colnames(Table(gpl))
gpl <- Table(gpl)[, c("ID", "GENE")]
entrez <- gpl$GENE[match(probes, gpl$ID)]
xm <- exprs(eset)
xm <- xm[!is.na(entrez), ]
geneIDs <- entrez[!is.na(entrez)]
IQRs <- apply(xm, 1, IQR)
summary(IQRs)
table(duplicated(geneIDs))
maxVar <- function(geneIDs, IQRs) {
dupx <- table(geneIDs)
keep <- vector("integer", length(dupx))
names(keep) <- names(dupx)
keep[dupx == 1] <- match(names(dupx[dupx == 1]), geneIDs)
dupx2 <- as.integer(names(dupx[dupx > 1]))
dupx2 <- sapply(dupx2,
function(x) {
i <- which(geneIDs %in% x) # duplicated indexes
i <- i[which.max(IQRs[i])] # index with max
return(i)
}
)
keep[dupx > 1] <- dupx2
return(keep)
}
keep <- maxVar(geneIDs, IQRs)
xm <- xm[keep, ]
rownames(xm) <- names(keep)
colnames(xm) <- as.character(ids)
head(xm)
head(gpl)
tail(gpl)
gpl[1:50, ]
gpl[100:200, ]
gpl[300:400, ]
head(gpl$GENE[!is.na(gpl$GENE)], 100)
group <- factor(unlist(mapply(rep, c("HC", "Aab", "T1D"), c(7,6,10))))
head(meta)
fitDesign <- function(matrix, group) {
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
fit <- lmFit(pmatrix, design)
return(fit)
}
fit <- fitDesign(xm, group)
head(xm)
group <- factor(unlist(mapply(rep, c("HC", "Aab", "T1D"), c(7,6,10))))
fit <- fitDesign(xm, group)
group
fitDesign <- function(matrix, group) {
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
fit <- lmFit(matrix, design)
return(fit)
}
fit <- fitDesign(xm, group)
AabvsHC <- fitContrast(xm, "Aab-HC")
AabvsHC <- fitContrast(fit, "Aab-HC")
T1DvsHC <- fitContrast(fit, "T1D-HC")
AabvsHC.adj.p <- p.adjust(AabvsHC$p.value, method="fdr")
T1DvsHC.adj.p <- p.adjust(T1DvsHC$p.value, method="fdr")
head(AabvsHC.adj.p)
gene.names <- select(org.Hs.eg.db, keep, c("SYMBOL", "ENTREZID"), "ENTREZID")
library(org.Hs.eg.db)
gene.names <- select(org.Hs.eg.db, keep, c("SYMBOL", "ENTREZID"), "ENTREZID")
head(keep)
head(names(keep))
gene.names <- select(org.Hs.eg.db, names(keep), c("SYMBOL", "ENTREZID"), "ENTREZID")
head(gene.names)
gene.symbol <- select(org.Hs.eg.db, names(keep), c("SYMBOL", "ENTREZID"), "ENTREZID")
rm(gene.names)
xm.dt <- as.data.table(xm)
head(xm.dt)
group[group == "HC"]
group == "HC"
xm.dt[, AAB.means := rowMeans(.SD), .SDcols = group == "HC"]
xm.dt[, AAB.means := rowMeans(.SD), .SDcols = group == "Aab"]
xm.dt[, HC.means := rowMeans(.SD), .SDcols = group == "HC"]
xm.dt[, T1D.means := rowMeans(.SD), .SDcols = group == "T1D"]
head(xm.dt)
setnames(prot, "Group", "Label")
setnames(proteomics, "Group", "Label")
xm.dt[, AABvsHC.Diff := AAB.means-HC.means/HC.means]
xm.dt[, T1DvsHC.Diff := T1D.means-HC.means/Hc.means]
xm.dt[, T1DvsHC.Diff := T1D.means-HC.means/HC.means]
xm.dt[, AABvsHC.Diff := (AAB.means-HC.means)/HC.means]
xm.dt[, T1DvsHC.Diff := (T1D.means-HC.means)/HC.means]
xm.dt[, AabvsHC := NULL]
xm.dt[, AABvsHC.Diff := NULL]
xm.dt[, T1DvsHC.Diff := NULL]
xm.dt[, Diff.AABvsHC := (AAB.means-HC.means)/HC.means]
xm.dt[, Diff.T1DvsHC.Diff := (T1D.means-HC.means)/HC.means]
xm.dt[, nlogP.AABvsHC := -log(AabvsHC.adj.p)]
xm.dt[, nlogP.T1DvsHC := -log(T1DvsHC.adj.p)]
xm.dt[, Gene := gene.symbol]
xm.dt[, Gene := gene.symbol$SYMBOL]
xm.dt[, Label := "Below significance"]
xm.dt[nlogP.AABvsHC > -log(0.05), Label := "Significant (AAB vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
xm.dt[nlogP.AABvsHC > -log(0.05) & nlogP.T1DvsHC > -log(0.05), Label := "Significant both (AAB vs HC) aHC (T1D vs HC)"]
xm.dt[nlogP.AABvsHC > -log(0.05) & (Diff.AABvsHC > 1.5 | Diff.AABvsHC < -1.5), Label := "Large sig. diff (AAB vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Large sig. diff (T1D vs HC)"]
xm.dt[, Diff.T1DvsHC := (T1D.means-HC.means)/HC.means]
xm.dt[, Diff.T1DvsHC.Diff := NULL]
xm.dt[, Label := "Below significance"]
xm.dt[nlogP.AABvsHC > -log(0.05), Label := "Significant (AAB vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
xm.dt[nlogP.AABvsHC > -log(0.05) & nlogP.T1DvsHC > -log(0.05), Label := "Significant both (AAB vs HC) aHC (T1D vs HC)"]
xm.dt[nlogP.AABvsHC > -log(0.05) & (Diff.AABvsHC > 1.5 | Diff.AABvsHC < -1.5), Label := "Large sig. diff (AAB vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Large sig. diff (T1D vs HC)"]
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
xm.dt[, Diff.AABvsHC := AAB.means-HC.means]
xm.dt[, Diff.T1DvsHC := T1D.means-HC.means]
xm.dt[nlogP.AABvsHC > -log(0.05), Label := "Significant (AAB vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
xm.dt[nlogP.AABvsHC > -log(0.05) & nlogP.T1DvsHC > -log(0.05), Label := "Significant both (AAB vs HC) aHC (T1D vs HC)"]
xm.dt[nlogP.AABvsHC > -log(0.05) & (Diff.AABvsHC > 1.5 | Diff.AABvsHC < -1.5), Label := "Large sig. diff (AAB vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Large sig. diff (T1D vs HC)"]
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = xm.dt, x = ~Diff.AABvsHC, y = ~nlogP.AABvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = xm.dt, x = ~Diff.AABvsHC, y = ~nlogP.AABvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
summary(AabvsHC.adj.p )
AabvsHC <- fitContrast(fit, "Aab-HC")
AabvsHC.adj.p <- p.adjust(AabvsHC$p.value, method="fdr")
summary(AabvsHC.adj.p )
AabvsHC <- fitContrast(fit, "Aab-HC")
head(AabvsHC$p.value)
head(AabvsHC$p.value, 100)
summary(AabvsHC$p.value)
xm.dt[, nlogP.AABvsHC := -log(AabvsHC$p.value)]
plot_ly(data = xm.dt, x = ~Diff.AABvsHC, y = ~nlogP.AABvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
head(AabvsHC$F.p.value)
head(AabvsHC$p.value)
summary(AabvsHC.adj.p)
summary(T1DvsHC.adj.p)
AabvsHC <- fitContrast(fit, "Aab-T1D")
AabvsHC.adj.p <- p.adjust(AabvsHC$p.value, method="fdr")
summary(AabvsHC.adj.p)
#
AabvsHC <- fitContrast(fit, "Aab-HC")
AabvsHC.adj.p <- p.adjust(AabvsHC$p.value, method="fdr")
summary(AabvsHC.adj.p)
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,5,3)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
xm.dt[, Label := "Not significant (adj.p > 0.05)"]
xm.dt[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Large sig. diff (T1D vs HC)"]
pal <- c("#A69EB0FF", "royalblue1", "violetred1", "#00FF83FF", "yellow2", "darkorchid1")
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,5,3)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
prot[nlogP.AABvsND > -log(0.05) & nlogP.T1DvsND > -log(0.05), Label := "Significant both (AAB vs ND) and (T1D vs ND)"]
prot[nlogP.AABvsND > -log(0.05) & (Diff.AABvsND > 1.5 | Diff.AABvsND < -1.5), Label := "Significant, larger difference (AAB vs ND)"]
prot[nlogP.T1DvsND > -log(0.05) & (Diff.T1DvsND > 1.5 | Diff.T1DvsND < -1.5), Label := "Significant, larger difference (T1D vs HC)"]
plot_ly(data = prot, x = ~Diff.T1DvsND, y = ~nlogP.T1DvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
prot[nlogP.AABvsND > -log(0.05) & (Diff.AABvsND > 1.5 | Diff.AABvsND < -1.5), Label := "Significant large difference (AAB vs ND)"]
prot[nlogP.T1DvsND > -log(0.05) & (Diff.T1DvsND > 1.5 | Diff.T1DvsND < -1.5), Label := "Significant large difference (T1D vs HC)"]
plot_ly(data = prot, x = ~Diff.T1DvsND, y = ~nlogP.T1DvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
pal <- c("#A69EB0FF", "#00FF83FF", "yellow2", "darkorchid1", "royalblue1", "violetred1")
plot_ly(data = prot, x = ~Diff.T1DvsND, y = ~nlogP.T1DvsND, text = ~ProteinName, type="scatter", mode = "markers", color = ~factor(Label), colors = pal) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = proteomics, x = ~Difference, y = ~nlogP, text = ~Protein, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,3,5)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = proteomics, x = ~Difference, y = ~nlogP, text = ~Protein, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,3,6)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
proteomics[nlogP > 3 & (Difference > 2 | Difference < -2), Label := "Significant large difference"]
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,5,3)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
xm.dt[, Label := "Not significant (adj.p > 0.05)"]
xm.dt[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
xm.dt[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Significant large difference (T1D vs HC)"]
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,5,3)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
plot_ly(data = xm.dt, x = ~Diff.T1DvsHC, y = ~nlogP.T1DvsHC, text = ~Gene, type="scatter", mode = "markers", color = ~factor(Label), colors = pal[c(1,3,6)]) %>%
layout(title ="Volcano Plot", plot_bgcolor = "#F7F7F7FF")
names(xm.dt)
xm.dt[, nlogP.AABvsHC := NULL]
xm.dt[, nlogP.unadj.AABvsHC := AabvsHC$p.value]
names(xm.dt)
head(xm.dt)
xm.dt[, EntrezID := names(keep)]
head(xm.dt)
fIQR <- IQRs > 0.50 # using value for first quartile
xm <- xm[fIQR, ]
geneIDs <- geneIDs[fIQR]
IQRs <- IQRs[fIQR]
xm <- exprs(eset)
xm <- xm[!is.na(entrez), ]
geneIDs <- entrez[!is.na(entrez)]
# IQR filtering
IQRs <- apply(xm, 1, IQR)
# Optional -- not done for dataset used in app --------------------------------
summary(IQRs)
fIQR <- IQRs > 0.50 # using value for first quartile
xm <- xm[fIQR, ]
geneIDs <- geneIDs[fIQR]
IQRs <- IQRs[fIQR]
keep <- maxVar(geneIDs, IQRs)
xm <- xm[keep, ]
fit <- fitDesign(xm, group)
#
AabvsHC <- fitContrast(fit, "Aab-HC")
AabvsHC.adj.p <- p.adjust(AabvsHC$p.value, method="fdr")
summary(AabvsHC.adj.p)
gx <- xm.dt
rm(xm.dtr)
rm(xm.dt)
save(gx, file = "gx.Rdata")
px1 <- proteomics
rm(proteomics)
gene <- strsplit(px1$Gene, ";")
multipleG <- sapply(gene, length)
table(multipleG)
uniprot <- strsplit(px1$Uniprots, ";")
multiple <- sapply(uniprot, length)
table(multiple)
# table(multipleG)
gene <- sapply(gene, `[[`, 1)
# table(multipleG)
gene <- sapply(gene, `[`, 1)
head(gene)
table(is.na(gene))
# Get entrez ID using the first gene name
entrez <- select(org.Hs.eg.db, gene, "ENTREZID", "SYMBOL")
head(entrez)
gene <- strsplit(px1$Gene, ";")
gene[[1]]
gene[[2]]
gene[[5]]
gene[[10]]
gene[[20]]
which(multipleG > 2)
gene[[14]]
# Get entrez ID using the first gene name
entrez <- lapply(gene, function(x) select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL"))
entrez[[1]]
gene[[1]]
function(x) select(org.Hs.eg.db, gene[[1]], "ENTREZID", "SYMBOL")
select(org.Hs.eg.db, gene[[1]], "ENTREZID", "SYMBOL")
# Get entrez ID using the first gene name
entrez <- lapply(gene, function(x) if(is.na(x)) return(NA) else select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL")$ENTREZID)
entrez[[1]]
head(gene)
gene[[1]]
gene[[1]][1]
# Get entrez ID using the first gene name
entrez <- lapply(gene[1:2], function(x) if(is.na(x)) return(NA) else select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL")$ENTREZID)
entrez
table(multipleG)
table(sapply(gene, is.na))
table(sapply(gene, function(x) all(is.na(x))))
which(sapply(gene, function(x) all(is.na(x))))
gene[[38]]
# Get entrez ID using the first gene name
entrez <- lapply(gene[1:2], function(x) if(!length(x)) return(NA) else select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL")$ENTREZID)
# Get entrez ID using the first gene name
entrez <- lapply(gene, function(x) if(!length(x)) return(NA) else select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL")$ENTREZID)
entrez[[1]]
entrez[[2]]
which(sapply(entrez, is.na))
entrez[[38]]
entrez[[62]]
length(entrez)
# Get entrez ID using the first gene name
entrez <- lapply(gene, function(x) if(!length(x)) return(NA) else select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL"))
entrez[[1]]
entrez[[2]]
entrex[[3]]
entrez[[3]]
gene
select(org.Hs.eg.db, gene[[996]], "ENTREZID", "SYMBOL")
select(org.Hs.eg.db, gene[[996]], "ENTREZID", "SYMBOL")$ENTREZID
# Get entrez ID using the first gene name
entrez <- lapply(gene, function(x) if(!length(x)) return(NA) else try(select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL")))
which(sapply(entrez, class) == "try-error")
gene[which(sapply(entrez, class) == "try-error")]
# Could not map to IDs as Symbols, try to map using the Alias key
entrez2 <- lapply(gene[which(sapply(entrez, class) == "try-error")], suppressWarnings(try(select(org.Hs.eg.db, x, "ENTREZID", "ALIAS"))))
# Could not map to IDs as Symbols, try to map using the Alias key
entrez2 <- lapply(gene[which(sapply(entrez, class) == "try-error")], function(x) suppressWarnings(try(select(org.Hs.eg.db, x, "ENTREZID", "ALIAS"))))
which(sapply(entrez2, class) == "try-error")
gene[try2][which(sapply(entrez2, class) == "try-error")]
# Could not map to IDs as Symbols, try to map using the Alias key
try2 <- which(sapply(entrez, class) == "try-error")
gene[try2][which(sapply(entrez2, class) == "try-error")]
gene[try2]
gene[try2][[7]]
entrez[[7]]
entrez2[[7]]
entrez2[which(sapply(entrez2, class) == "try-error")]
entrez2[which(sapply(entrez2, class) == "try-error")] <- c(4513, 4514, 4538, 4540)
entrez2[which(sapply(entrez2, class) == "try-error")]
entrez2[which(sapply(entrez2, class) == "try-error")]
entrez2
which(sapply(entrez2, class) == "try-error")
entrez2 <- lapply(gene[try2], function(x) suppressMessages(try(select(org.Hs.eg.db, x, "ENTREZID", "ALIAS"))))
entrez2[which(sapply(entrez2, class) == "try-error")]
a <- list{1:5}
a <- list(1:5)
a
a[[2]] <- NA
a
a[1:2] <- "test"
a
which(sapply(entrez2, class) == "try-error")
a[which(sapply(a, `==`, "test"))] <- "test2"
a
entrez2[which(sapply(entrez2, class) == "try-error")] <- c(4513, 4514, 4538, 4540)
entrez2
entrez[try2] <- entrez2
entrez <- lapply(entrez, function(x) if(length(x) > 1) unique(x$ENTREZID))
head(entrez)
table(sapply(entrez, length))
entrez[sapply(entrez, length) > 2]
entrez <- lapply(entrez, function(x) if(length(x) > 1) na.omit(x))
table(sapply(entrez, length))
entrez[[1]]
# Get entrez ID using the first gene name
entrez <- vector("list", length(gene))
entrez <- lapply(gene, function(x) if(!length(x)) return(NA) else suppressMessages(try(select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL"))))
shiny::runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
entrez[try2] <- entrez2
entrez[[1]]
entrez <- lapply(entrez, function(x) if(length(x) > 1) unique(x$ENTREZID))
entrez[[1]]
entrez[1:20]
na.omit(entrez[[1]])
entrez2 <- lapply(entrez, function(x) if(length(x) > 1) na.omit(x))
entrez2[[1]]
rm(entrez2)
entrez[[1]]
entrez[[9]][!is.na(entrez[[9]])]
length(entrez[[9]])
entrez <- lapply(entrez, function(x) if(length(x) > 1) x[!is.na(x)])
table(sapply(entrez, length))
entrez[[1]]
# Get entrez ID using the first gene name
entrez <- lapply(gene, function(x) if(!length(x)) return(NA) else suppressMessages(try(select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL"))))
try2 <- which(sapply(entrez, class) == "try-error")
entrez2 <- lapply(gene[try2], function(x) suppressMessages(try(select(org.Hs.eg.db, x, "ENTREZID", "ALIAS"))))
entrez2[which(sapply(entrez2, class) == "try-error")] <- c(4513, 4514, 4538, 4540)
entrez[try2] <- entrez2
entrez <- lapply(entrez, function(x) if(length(x) > 1) unique(x$ENTREZID))
entrez <- lapply(entrez, function(x) if(length(x) > 1) x[!is.na(x)] else x)
table(sapply(entrez, length))
px1[, Entrez := sapply(entrez, `[`, 1)]
test <- sapply(entrez, `[`, 1)
test <- sapply(entrez, `[`, 2)
table(is.na(test))
entrez[:10]
entrez[1:10]
sapply(entrez[1:10], `[`, 2)
entrez[[1]][2]
px1[, Entrez.2 := sapply(entrez, `[`, 2)]
head(px1)
px1[nlogP < 3, Label := "Not significant (adj.p > 0.05)"]
px1[nlogP > 3, Label := "Significant"]
px1[nlogP > 3 & (Difference > 2 | Difference < -2), Label := "Significant large difference"]
save(px1, "px1.Rdata")
save(px1, file = "px1.Rdata")
head(px2)
px2 <- prot
rm(prot)
head(px2)
setnames(px2, c("ProteinName", "GeneName"), c("Protein", "Gene"))
setnames(px2, c("ProteinID"), "UniprotIDs")
names(px1)
setnames(px1, "ND.means", "HC.means")
save(px1, file = "px1.Rdata")
names(px2)
setnames(px2, grep("ND", names(px2), val = T), gsub("ND", "HC", grep("ND", names(px2), val = T)))
head(px2)
px2[, Label := "Not significant (adj.p > 0.05)"]
px2[nlogP.AABvsHC > -log(0.05), Label := "Significant (AAB vs HC)"]
px2[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
px2[nlogP.AABvsHC > -log(0.05) & nlogP.T1DvsHC > -log(0.05), Label := "Significant both (AAB vs HC) and (T1D vs HC)"]
px2[nlogP.AABvsHC > -log(0.05) & (Diff.AABvsHC > 1.5 | Diff.AABvsHC < -1.5), Label := "Significant large difference (AAB vs HC)"]
px2[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Significant large difference (T1D vs HC)"]
table(sapply(px2$Gene, length))
entrez3 <- try(select(org.Hs.eg.db, px2$Gene, "ENTREZID", "SYMBOL"))
head(entrez3)
entrez3 <- lapply(px2$Gene, function(x) try(select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL")))
table(sapply(entrez3, length))
table(sapply(entrez3, class) == "try-error")
try3 <- lapply(px2$Gene[sapply(entrez3, class) == "try-error"], function(x) try(select(org.Hs.eg.db, x, "ENTREZID", "ALIAS")))
table(sapply(try3, class) == "try-error")
try3[sapply(try3, class) == "try-error"] <- NA
entrez3[sapply(entrez3, class) == "try-error"] <- try3
a
lapply(a, function(x) if(length(x) > 1) unique(x))
entrez <- lapply(gene, function(x) if(!length(x)) return(NA) else suppressMessages(try(select(org.Hs.eg.db, x, "ENTREZID", "SYMBOL"))))
# Could not map to IDs as Symbols, try to map using the Alias key
try2 <- which(sapply(entrez, class) == "try-error")
entrez2 <- lapply(gene[try2], function(x) suppressMessages(try(select(org.Hs.eg.db, x, "ENTREZID", "ALIAS"))))
gene[try2][which(sapply(entrez2, class) == "try-error")]
# "MT-CO2" "MT-CO3" "MT-ND4" "MT-ND5"
# For some reason annotation was missing for these (recognized as neither gene SYMBOL nor ALIAS),
# but since there are only four, they were manually looked up, e.g. https://www.ncbi.nlm.nih.gov/gene/?term=MT-CO2
# 4513, 4514, 4538, 4540
entrez2[which(sapply(entrez2, class) == "try-error")] <- c(4513, 4514, 4538, 4540)
entrez[try2] <- entrez2
entrez <- lapply(entrez, function(x) if(length(x) > 1) unique(x$ENTREZID) else x)
entrez <- lapply(entrez, function(x) if(length(x) > 1) x[!is.na(x)] else x)
px1[, Entrez := sapply(entrez, `[`, 1)]
px1[, Entrez.2 := sapply(entrez, `[`, 2)]
save(px1, file = "px1.Rdata")
entrez3 <- lapply(entrez3, function(x) if(length(x) > 1) unique(x$ENTREZID) else x)
table(sapply(entrez3, length))
table(sapply(entrez3, is.na))
entrez3
entrez3 <- unlist(entrez3)
px2[, Entrez := entrez3]
head(px2)
save(px2, file = "px2.Rdata")
write.table(px2, "px2.tsv", sep = "\t", row.names = F)
write.table(px1, "px1.tsv", sep = "\t", row.names = F)
write.table(gx, "gx.tsv", sep = "\t", row.names = F)
