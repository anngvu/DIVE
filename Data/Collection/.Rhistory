a. <- ""
rm(a.)
.a <- "list"
.a
rm(.a)
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
runApp('nPOD/nPOD-App/DIVE')
head(gx$Gene)
shiny::runApp('nPOD/nPOD-App/DIVE')
gx$Gene
names(gx)
names(gx$Entrez)
head(gx$Entrez)
setwd("~/nPOD/nPOD-App/DIVE/Data")
library(data.table)
library(GEOquery)
library(genefilter)
library(limma)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(GO.db)
fitDesign <- function(matrix, group) {
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
fit <- lmFit(matrix, design)
return(fit)
}
fitContrast <- function(fit, contrast) {
cont.matrix <- limma::makeContrasts(contrasts = contrast, levels = fit$design)
fit2 <- contrasts.fit(fit, cont.matrix) %>% eBayes()
return(fit2)
}
#---Transcriptomics dataset-----------------------------------------------------------------------------------------------------------------------------------------#
# Only one transcriptomics available from Yip et al. (unpublished), which can be retrieved from GEO
gse <- "GSE72492"
gse <- getGEO(gse) ## No bioconductor package is available, so use the GPL
eset <- gse[[1]]
meta <- pData(eset)
ids <- as.numeric(meta$`npod id:ch1`)
# For nonspecific filtering use genefilterL::nsFilter when bioconductor annotation package is available;
# have to manually go through these steps otherwise.
# With expression matrix, filter out features lacking entrez IDs
probes <- row.names(eset)
gpl <- getGEO(annotation(eset))
# GPL files can vary somewhat, so check column names:
# colnames(Table(gpl))
gpl <- Table(gpl)[, c("ID", "GENE")]
entrez <- gpl$GENE[match(probes, gpl$ID)]
xm <- exprs(eset)
xm <- xm[!is.na(entrez), ]
geneIDs <- entrez[!is.na(entrez)]
# IQR filtering
IQRs <- apply(xm, 1, IQR)
# Optional -- not done for dataset used in app --------------------------------
summary(IQRs)
fIQR <- IQRs > 0.50 # using value for first quartile
xm <- xm[fIQR, ]
geneIDs <- geneIDs[fIQR]
IQRs <- IQRs[fIQR]
#------------------------------------------------------------------------------
# If more than one probe for entrez gene, use highest variance:
table(duplicated(geneIDs))
maxVar <- function(geneIDs, IQRs) {
dupx <- table(geneIDs)
keep <- vector("integer", length(dupx))
names(keep) <- names(dupx)
keep[dupx == 1] <- match(names(dupx[dupx == 1]), geneIDs)
dupx2 <- as.integer(names(dupx[dupx > 1]))
dupx2 <- sapply(dupx2,
function(x) {
i <- which(geneIDs %in% x) # duplicated indexes
i <- i[which.max(IQRs[i])] # index with max
return(i)
}
)
keep[dupx > 1] <- dupx2
return(keep)
}
keep <- maxVar(geneIDs, IQRs)
# Look up genes with IDs
gene.symbol <- select(org.Hs.eg.db, names(keep), c("SYMBOL", "ENTREZID"), "ENTREZID")
load("gx.Rdata")
gx[, Gene := gene.symbol$SYMBOL]
xm <- xm[keep, ]
rownames(xm) <- names(keep)
colnames(xm) <- as.character(ids)
# Stats for volcano plot
group <- factor(unlist(mapply(rep, c("HC", "Aab", "T1D"), c(7,6,10))))
fit <- fitDesign(xm, group)
#
AabvsHC <- fitContrast(fit, "Aab-HC")
T1DvsHC <- fitContrast(fit, "T1D-HC")
AabvsHC.adj.p <- p.adjust(AabvsHC$p.value, method="fdr")
T1DvsHC.adj.p <- p.adjust(T1DvsHC$p.value, method="fdr")
summary(AabvsHC.adj.p) # Absolutely no significant differences Aab vs HC
summary(T1DvsHC.adj.p)
gx <- as.data.table(xm)
gx[, Gene := gene.symbol$SYMBOL]
gx[, Entrez := names(keep)]
gx[, AAB.means := rowMeans(.SD), .SDcols = group == "Aab"]
gx[, HC.means := rowMeans(.SD), .SDcols = group == "HC"]
gx[, T1D.means := rowMeans(.SD), .SDcols = group == "T1D"]
# Legend labels for plot
gx[, Diff.AABvsHC := AAB.means-HC.means]
gx[, Diff.T1DvsHC := T1D.means-HC.means]
gx[, nlogP.T1DvsHC := -log(T1DvsHC.adj.p)]
gx[, nlogP.unadj.AABvsHC := -log(AabvsHC$p.value)]
gx[, Label := "Not significant (adj.p > 0.05)"]
gx[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
gx[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Significant large difference (T1D vs HC)"]
save(gx, file = "gx.Rdata")
head(gx)
group == "Aab"
gx[, AAB.means := rowMeans(.SD), .SDcols = group == "Aab"]
gx[, HC.means := rowMeans(.SD), .SDcols = group == "HC"]
group == "HC"
colnames(xm[group == "Aab"])
names(xm)
ids
gx[, AAB.means := rowMeans(.SD), .SDcols = ids[group == "Aab"]]
gx[, AAB.means := rowMeans(.SD), .SDcols = as.character(ids[group == "Aab"])]
gx[, HC.means := rowMeans(.SD), .SDcols = as.character(ids[group == "HC"])]
gx[, T1D.means := rowMeans(.SD), .SDcols = as.character(ids[group == "T1D"])]
gx[, Diff.AABvsHC := AAB.means-HC.means]
gx[, Diff.T1DvsHC := T1D.means-HC.means]
gx[, nlogP.T1DvsHC := -log(T1DvsHC.adj.p)]
gx[, nlogP.unadj.AABvsHC := -log(AabvsHC$p.value)]
gx[, Label := "Not significant (adj.p > 0.05)"]
gx[nlogP.T1DvsHC > -log(0.05), Label := "Significant (T1D vs HC)"]
gx[nlogP.T1DvsHC > -log(0.05) & (Diff.T1DvsHC > 1.5 | Diff.T1DvsHC < -1.5), Label := "Significant large difference (T1D vs HC)"]
save(gx, file = "gx.Rdata")
head(gx)
runApp('~/nPOD/nPOD-App/DIVE')
head(gx)
load("gx.Rdata")
head(gx)
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
head(px1)
table(px1$Text == "")
save(gx, "gx.Rdata")
save(gx, file = "gx.Rdata")
save(px1, file = "px1.Rdata")
save(px2, file = "px2.Rdata")
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
length(NULL)
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
"a" %in% letters[1:5]
letters[1:5] %in% "a"
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
x <- list()
x
rm(x)
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
plots <- list()
plots <- c(plots, "A")
plots
rm(plots)
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
plots
plots()
x <- plot_ly()
x
plots <- list()
plots <- c(plots, x)
y <- plot_ly()
subplot(plots)
subplot(x, y)
plots$x <- x
plots$y <- y
subplot(plots)
subplot(list(x, y))
class(plots)
plots
plots
subplot(unlist(plots))
plots[[1]]
z <- list(x, y)
subplot(z)
rm(z)
z$x <- x
z <- list()
z$x <- x
z$y <- y
subplot(z)
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
setwd("~/nPOD/nPOD-App/Collection")
#####################################################################
# Function for combining rows, e.g.
# ---------------------------------------------
#ID   alpha_mass beta_mass2   HS  Col18   Sdc1
#6134      0.313      0.344   NA     NA     NA
#6134         NA         NA 22.4 41.111 20.669
#
# becomes -->
#ID alpha_mass beta_mass2   HS  Col18   Sdc1
#6134      0.313      0.344 22.4 41.111 20.669
Agg <- function(x) {
result <- unique(x[!is.na(x)])
# Note: returning first(x) is better than return(NA)
# because it will be the right kind of NA for the column
if(!length(result)) return(first(x)) else return(result)
}
#####################################################################
# Process curated data from publications
collection <- list.files(pattern = "*.txt")
collection <- lapply(collection, function(x) fread(x))
# same variables from different studies distinguished by the source i
for(i in seq_along(collection)) setnames(collection[[i]], c("ID", paste0("i", i, "_", names(collection[[i]])[-1])))
cdataA <- rbindlist(collection, use.names = T, fill = T)
cdata <- cdataA[, lapply(.SD, Agg), by = ID]
library(data.table)
setwd("~/nPOD/nPOD-App/Collection")
#####################################################################
# Function for combining rows, e.g.
# ---------------------------------------------
#ID   alpha_mass beta_mass2   HS  Col18   Sdc1
#6134      0.313      0.344   NA     NA     NA
#6134         NA         NA 22.4 41.111 20.669
#
# becomes -->
#ID alpha_mass beta_mass2   HS  Col18   Sdc1
#6134      0.313      0.344 22.4 41.111 20.669
Agg <- function(x) {
result <- unique(x[!is.na(x)])
# Note: returning first(x) is better than return(NA)
# because it will be the right kind of NA for the column
if(!length(result)) return(first(x)) else return(result)
}
#####################################################################
# Process curated data from publications
collection <- list.files(pattern = "*.txt")
collection <- lapply(collection, function(x) fread(x))
# same variables from different studies distinguished by the source i
for(i in seq_along(collection)) setnames(collection[[i]], c("ID", paste0("i", i, "_", names(collection[[i]])[-1])))
cdataA <- rbindlist(collection, use.names = T, fill = T)
cdata <- cdataA[, lapply(.SD, Agg), by = ID]
cdata <- Filter(is.numeric, cdata) # Subset columns that actually hav
library(data.table)
setwd("~/nPOD/nPOD-App/Collection")
#####################################################################
# Function for combining rows, e.g.
# ---------------------------------------------
#ID   alpha_mass beta_mass2   HS  Col18   Sdc1
#6134      0.313      0.344   NA     NA     NA
#6134         NA         NA 22.4 41.111 20.669
#
# becomes -->
#ID alpha_mass beta_mass2   HS  Col18   Sdc1
#6134      0.313      0.344 22.4 41.111 20.669
Agg <- function(x) {
result <- unique(x[!is.na(x)])
# Note: returning first(x) is better than return(NA)
# because it will be the right kind of NA for the column
if(!length(result)) return(first(x)) else return(result)
}
#####################################################################
# Process curated data from publications
collection <- list.files(pattern = "*.txt")
collection <- lapply(collection, function(x) fread(x))
# same variables from different studies distinguished by the source i
for(i in seq_along(collection)) setnames(collection[[i]], c("ID", paste0("i", i, "_", names(collection[[i]])[-1])))
cdataA <- rbindlist(collection, use.names = T, fill = T)
cdata <- cdataA[, lapply(.SD, Agg), by = ID]
first(1:10)
Agg <- function(x) {
result <- unique(x[!is.na(x)])
# Note: returning first(x) is better than return(NA)
# because it will be the right kind of NA for the column
if(!length(result)) return(data.table::first(x)) else return(result)
}
cdata <- cdataA[, lapply(.SD, Agg), by = ID]
head(cdata)
grep("Yip", "Liu", "Nya")
grep("Yip|Liu|Nya", collection)
collection
# Intersection with high-throughput data
grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files((pattern = "*.txt")))
# Intersection with high-throughput data
grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt"))
# Intersection with high-throughput data
HD <- paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt")))
HD
names(cdata)
cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
# Intersection with high-throughput data
HD <- paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt")))
# Intersection with high-throughput data
HD <- grep(paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt"))), names(cdata))
# Intersection with high-throughput data
HD <- grep(paste0(paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt"))), collapse = "i"), names(cdata), val = T)
HD
paste0(paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt"))), collapse = "i")
paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt")))
# Intersection with high-throughput data
HD <- grep(paste0(paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt"))), collapse = "|"), names(cdata), val = T)
HD
# Intersection with high-throughput data
HD <- grep(paste0(paste0("i", grep("Yip-unpublished|Liu-2016|Nyalwidhe-2017", list.files(pattern = "*.txt")), "_"), collapse = "|"), names(cdata), val = T)
HD
cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
print(cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ], 100)
print(cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ], 100)
# Intersection with high-throughput data
HD <- grep("omics$", names(cdata), val = T)
HD
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[, !Reduce(`&`, lapply(.SD, is.na))]
HD
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ HD[, !Reduce(`&`, lapply(.SD, is.na))] ]
HD
HD[, lapply(.SD, function(x) sum(is.na))]
HD[, lapply(.SD, function(x) sum(is.na(x)))]
HD[, sapply(.SD, function(x) sum(is.na(x)))]
HD <- HD[ HD[, sapply(.SD, function(x) sum(is.na(x)))] < 30]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 30 ]
HD
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 30 , with = F]
head(HD)
HD
HD <- Filter(is.numeric, HD)
HD
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 30 , with = F]
HD <- lapply(HD, as.character)
head(HD)
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 30 , with = F]
HD <- as.matrix(HD, mode = "character")
head(HD)
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 30 , with = F]
HD.overlaps <- crossprod(as.matrix(HD[, lapply(.SD, function(x) as.integer(!is.na(x))), .SDcols = names(HD)[-1]]))
HD.overlaps
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD.overlaps <- crossprod(as.matrix(HD[, lapply(.SD, function(x) as.integer(!is.na(x))), .SDcols = names(HD)[names(HD) != "ID"]]))
HD.overlaps
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 35 , with = F]
HD.overlaps <- crossprod(as.matrix(HD[, lapply(.SD, function(x) as.integer(!is.na(x))), .SDcols = names(HD)[names(HD) != "ID"]]))
HD.overlaps
HD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = HD] ]
HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 35 , with = F]
HD.overlaps <- crossprod(as.matrix(HD[, lapply(.SD, function(x) as.integer(!is.na(x))), .SDcols = names(HD)[names(HD) != "ID"]]))
HD.overlaps
HD.overlaps[, 1]
HD.overlaps[, "i51_Proteomics:]
HD.overlaps[, "i51_Proteomics"]
HD.overlaps[, "i27_Proteomics"]
HD$ID
getwd()
load("core_compiled_2018-07-10.Rdata")
load("Core/core_compiled_2018-07-10.Rdata")
HD <- merge(HD, aab, by = "ID")
HD <- merge(HD, demog, by = "ID", all.x = T)
HD <- merge(HD, dinfo, by = "ID", all.x = T)
HD <- merge(HD, HLA, by = "ID", all.x = T)
head(HD)
iHD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = iHD] ]
head(HD)
HD <- HD[, iHD, with = F]
HD
iHD <- grep("omics$", names(cdata), val = T)
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = iHD] ]
HD <- HD[, c("ID", iHD), with = F]
HD <- merge(HD, aab, by = "ID", all.x = T)
HD <- merge(HD, demog, by = "ID", all.x = T)
HD <- merge(HD, dinfo, by = "ID", all.x = T)
HD <- merge(HD, HLA, by = "ID", all.x = T)
HD
HD <- cdata[cdata[ , !Reduce(`&`, lapply(.SD, is.na)), .SDcols = iHD] ]
# HD <- HD[ , HD[, sapply(.SD, function(x) sum(is.na(x)))] < 35 , with = F]
HD <- HD[, c("ID", iHD), with = F]
HD <- merge(HD, aab, by = "ID", all.x = T)
HD <- merge(HD, demog, by = "ID", all.x = T)
HD <- merge(HD, dinfo, by = "ID", all.x = T)
HD <- merge(HD, HLA[, .(ID, DRB1.1, DRB1.2, DQA1.1, DQA1.2, DQB1.1, DQB1.2)], by = "ID", all.x = T)
HD
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
getwd()
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
runApp('~/nPOD/nPOD-App/DIVE')
