# Get a list of significantly expressed metabolites

library(limma)

# Contrast (donors) vs (cases at different timepoints)
vsDONORS <- function(timepoint) {
  base <- xxmat[, grep(paste0("DONOR|", timepoint), colnames(xxmat))]
  group <- factor(ifelse(grepl("DONOR", colnames(base)), "DONOR", timepoint))
  design <- model.xxmatrix(~0 + group)
  colnames(design) <- levels(group)
  fit <- lmFit(base, design)
  contrast <- paste0("DONOR-", timepoint)
  cont.xxmatrix <- limma::makeContrasts(contrasts = contrast, levels = fit$design)
  fit2 <- contrasts.fit(fit, cont.xxmatrix) %>% eBayes()
  top <- topTable(fit2, adjust = "fdr", sort.by = "B", number = 500)
  top
}

# How much do cases diverge overall from donors over all timepoints?
timepoints <- unique(gsub("^.*?_", "", colnames(xmat)))
diffsDonor <- lapply(timepoints, vsDONORS)
names(diffsDonor) <- timepoints
nsig <- sapply(diffsDonor, function(x) sum(x$adj.P.Val < 0.05))
metsig <- lapply(diffsDonor, function(x) rownames(x)[x$adj.P.Val < 0.05])
metsig_diff <- list(setdiff(metsig[["w0_A"]], metsig[["w0_B"]]),
                  setdiff(metsig[["w24_A"]], metsig[["w24_B"]]),
                  setdiff(metsig[["w48_A"]], metsig[["w48_B"]]))
metsig_counts <- table(unlist(metsig))
metsig_counts <- metsig_counts[order(metsig_counts, decreasing = T)]
metsig_dt <- data.table(Timepoint = factor(unlist(mapply(rep, timepoints, nsig)), levels = timepoints),
                     BIOCHEMICAL = unlist(metsig))
metsig_dt <- merge(metsig_dt, anno[, .(BIOCHEMICAL, SUBPATHWAY, SUPERPATHWAY)], by = "BIOCHEMICAL")

sigbysuper <- metsig_dt[, .N, by = .(Timepoint, SUPERPATHWAY)]
sigbysuper[, Percent := N/sum(N) * 100, by = Timepoint]

superplot <- ggplot(data = sigbysuper,
                    aes(x = Timepoint, y = N, fill = SUPERPATHWAY, label = Percent)) +
  geom_bar(stat = "identity") +
  # geom_text(aes(label = Percent)) +
  theme(legend.position="none")
ggplotly(superplot)

metasigbysuperA <- metsigA[, .N, by = .(Timepoint, SUPERPATHWAY)]
sigbysuperA[, Percent := N/sum(N) * 100, by = Timepoint]
superplotA <- ggplot(data = sigbysuperA,
                     aes(x = Timepoint, y = N, fill = SUPERPATHWAY, label = Percent)) +
  geom_bar(stat = "identity") +
  # geom_text(aes(label = Percent)) +
  theme(legend.position="none")
ggplotly(superplotA)

# ------------------------------------------------------------------------------------------- #

# Contrast (cases at first baseline) vs (cases at later time points)
vsBaseline <- function(t1, t2) {
  base <- xxmat[, grep(paste0("^(?!DONOR).*(", t1, "|", t2, ")"), colnames(xxmat), perl = T)]
  group <- factor(ifelse(grepl(t1, colnames(base)), t1, t2))
  design <- model.xxmatrix(~0 + group)
  colnames(design) <- levels(group)
  fit <- lmFit(base, design)
  contrast <- paste0(t1, "-", t2)
  cont.xxmatrix <- limma::makeContrasts(contrasts = contrast, levels = fit$design)
  fit2 <- contrasts.fit(fit, cont.xxmatrix) %>% eBayes()
  top <- topTable(fit2, adjust = "fdr", sort.by = "B", number = 500)
  top
}

# For cases, how different are profiles from the 0 week to new [Baselines] at 24 weeks and 48 weeks?
# Does transplant induce a lasting paradigm shift?
metsigB <- Map(vsBaseline, c("w0_B", "w0_B"), c("w24_B", "w48_B"))
# Basically no, but the signal is probably reduced because we're including autologous control cases

# How different are cases at baseline compared to immediately [After] transplant? What does procedure change?
# Note: can't separate differences between autologous and non-autologous because don't have labels
metsigA <- Map(vsBaseline, c("w0_B", "w0_B", "w0_B"), c("w0_A", "w24_A", "w48_A"))
nsigA <- sapply(metsigA, function(x) sum(x$adj.P.Val < 0.05))
metsigA <- lapply(metsigA, function(x) rownames(x)[x$adj.P.Val < 0.05])
metsigA <- data.table(Timepoint = unlist(mapply(rep, c("w0_A", "w24_A", "w48_A"), nsigA)),
                      BIOCHEMICAL = unlist(metsigA))
metsigA <- merge(metsigA, anno[, .(BIOCHEMICAL, SUBPATHWAY, SUPERPATHWAY)], by = "BIOCHEMICAL")

# Intersect list of significantly changed for w24 and w48 procedure
sigA <- Reduce(intersect, split(metsigA$BIOCHEMICAL, metsigA$Timepoint))

# Export as KEGG IDs for pathway analysis
sigAKEGG <- anno[BIOCHEMICAL %in% sigA, KEGG]
sigAKEGG <- sigAKEGG[sigAKEGG != ""]
writeLines(sigAKEGG, "sigAKEGG.txt")

# Export as PUBCHEM IDs for over-enrichment analysis
sigAPUBCHEM <- anno[BIOCHEMICAL %in% sigA, PUBCHEM]
sigAPUBCHEM <- sigAPUBCHEM[sigAPUBCHEM != ""]
writeLines(sigAPUBCHEM, "sigAPUBCHEM.txt")

