% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataUpload.R
\name{dataUploadServer}
\alias{dataUploadServer}
\title{Shiny server function for data table upload module}
\usage{
dataUploadServer(
  id,
  asDT = TRUE,
  removable = FALSE,
  checkFun = NULL,
  informd = NULL,
  appdata = NULL,
  checkappdata = F
)
}
\arguments{
\item{asDT}{Logical flag to indicate whether data returned should be a data.table. If FALSE, \code{readLines} is used on file.}

\item{removable}{Logical flag to indicate whether data upload will have "removable" feature. Defaults to FALSE. See details.}

\item{checkFun}{Optional, a custom check function for an additional layer of checking/modifying uploaded data.
It should return a list containing message and result (result should be \code{NULL} when data fails checks).}

\item{informd}{Optional, an Rmarkdown help file for infoOutput, e.g. requirements info.}

\item{appdata}{Optional, the name (including extension) of one or more files stored in appdata that can be
mock-uploaded. See details.}

\item{checkappdata}{Whether checkFun should be applied to appdata, normally FALSE.}

\item{input, output, session}{Standard \code{shiny} boilerplate.}
}
\value{
A data.table with a "filename" attribute containing the filename without extension,
or \code{NULL} if the file input was not a table or returned as \code{NULL} from \code{checkFun}.
}
\description{
At its most basic, the module checks for and returns a data table from \code{fileInput}
(if the uploaded file is not data in table format, the return will be \preformatted{NULL}).
}
\details{
A check function can be optionally integrated into this module to perform additional
"light" data checking or modification operations and make the the module somewhat adaptable for different uses.
Some example check functions simply check for specific column names or data types.
For more intense data processing that might involve multiple functions and/or side effects as part of a pipeline,
one should really make a specialized module and pass the data into that intermediate module.

File uploads can have "reset" behavior by specifying the optional \code{removable} parameter,
where a remove button will appear after upload, allowing data to be "cleared", in which case the module returns \code{NULL}).

The module also optionally incorporates \code{\link{infoOutput}} functionality to provide specifications for data.

Finally, it is possible to perform a mock upload of a saved dataset, e.g. for demonstration purposes, that is triggered externally.
The dataset is expected to be a .csv/.tsv file in a relative directory within the app directory.
For instance, the dataset path can be "appdata/Demo.csv".
}
